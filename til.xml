<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Fabrizio Damicelli</title>
<link>https://fabridamicelli.github.io/til.html</link>
<atom:link href="https://fabridamicelli.github.io/til.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.7.34</generator>
<lastBuildDate>Sun, 26 Jan 2025 00:00:00 GMT</lastBuildDate>
<item>
  <title>Impersonate Google Cloud Service Account</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/til/impersonate-gcp-service-account.html</link>
  <description><![CDATA[ 




<p>Google Cloud Platform (GCP) uses so-called <a href="https://cloud.google.com/iam/docs/service-account-overview">“Service accounts”</a> to manage granular permissions: &gt; A service account is a special kind of account typically used by an application or compute workload, such as a Compute Engine instance, rather than a person.</p>
<p>For example, you might have a service account dedicated to trigger a particular workload on GCP from <a href="https://github.com/features/actions">Github actions</a>. This allows us to have very granular permissions that we can give/revoke. So far so good, but sometimes we want to run the workflow from our local machine, for example to test it.</p>
<p>In such case we can <em>impersonate</em> the service account that we want to test and trigger the workload on its behalf like this:</p>
<ol type="1">
<li>Create short-lived credentials and store them locally:</li>
</ol>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb1-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">gcloud</span> iam service-accounts keys create /local/path/to/credentials.json <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-2">  <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--iam-account</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name-of-service-account@name-of-gcp-project.iam.gserviceaccount.com"</span></span></code></pre></div>
<ol start="2" type="1">
<li>Pass the credentials when runnning the workload (example with bigquery client):</li>
</ol>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> google.oauth2 <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> service_account</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_impersonated_client(project):</span>
<span id="cb2-4">    credentials <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> service_account.Credentials.from_service_account_file(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/local/path/to/credentials.json"</span>)</span>
<span id="cb2-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> bigquery.Client(credentials<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>credentials, project<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>project)</span></code></pre></div>
<p>The returned client will act as if it was our target service account (and not using the credentials from the user logged-in authenticated in the local machine)</p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>Google Cloud Platform</category>
  <guid>https://fabridamicelli.github.io/til/impersonate-gcp-service-account.html</guid>
  <pubDate>Sun, 26 Jan 2025 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Catch output of IPython magic %timeit</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/til/ipy-timeit-output.html</link>
  <description><![CDATA[ 




<p><a href="https://ipython.readthedocs.io/en/stable/interactive/magics.html#built-in-magic-commands">IPython “magic” commands</a> are pretty handy in general.<br>
In particular, I often use <code>%time</code> and <code>%timeit</code> for rapid profiling of little code snippets, for example:</p>
<div id="cell-2" class="cell" data-execution_count="37">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-6">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"whitegrid"</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-3" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit time.sleep(random.random())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The slowest run took 67.00 times longer than the fastest. This could mean that an intermediate result is being cached.
400 ms ± 347 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>As the output shows, we get <code>mean ± std</code> across several runs (IPython will try to guesstimate how many runs are actually necessary, but you can change those parameters too).<br>
That does the job almost always. But what if we want to get all run values?<br>
You can pass the parameter <code>-o</code> and that’ll do!</p>
<div id="cell-5" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> time.sleep(random.random())  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># -r -&gt; repeat R times the measurement</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>The slowest run took 111.58 times longer than the fastest. This could mean that an intermediate result is being cached.
497 ms ± 292 ms per loop (mean ± std. dev. of 100 runs, 1 loop each)</code></pre>
</div>
</div>
<p>So we can do stuff with the output:</p>
<div id="cell-7" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">times.timings[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="30">
<pre><code>[0.22056039492599666,
 0.23466998199000955,
 0.26134258206002414,
 0.8024904718622565,
 0.9086503440048546]</code></pre>
</div>
</div>
<div id="cell-8" class="cell" data-execution_count="38">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">np.percentile(times.timings, <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.99</span>)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="38">
<pre><code>0.014373812611727044</code></pre>
</div>
</div>
<p>Or plotting them:</p>
<div id="cell-10" class="cell" data-execution_count="36">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">sns.histplot(times.timings)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/til/2024-07-29-ipy-timeit-output_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Let’s run the same thing, 10 loops each time (<code>-n</code>):</p>
<div id="cell-12" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>n <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span> time.sleep(random.random())</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>486 ms ± 85.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>The output is in fact a proper object with some potentially useful attributes as well:</p>
<div id="cell-14" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">times</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>&lt;TimeitResult : 486 ms ± 85.2 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)&gt;</code></pre>
</div>
</div>
<div id="cell-15" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">times.loops, times.worst, times.best, times.compile_time</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="25">
<pre><code>(10, 0.6338168126065284, 0.37239220049232247, 0.00032199999999993345)</code></pre>
</div>
</div>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <category>IPython</category>
  <guid>https://fabridamicelli.github.io/til/ipy-timeit-output.html</guid>
  <pubDate>Mon, 29 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Use .bigqueryrc to set BigQuery global configuration</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/til/bigqueryrc.html</link>
  <description><![CDATA[ 




<p>I started using the nice vim plugin <a href="https://github.com/tpope/vim-dadbod">vim-dadbod</a> which allows to fire database queries and see the output <em>inside</em> vim/neovim.</p>
<p>While setting it up to work with <a href="https://cloud.google.com/bigquery?hl=en">BigQuery</a> I ran into the error coming from the fact that BigQuery’s format to name a table has changed in time and <code>bq</code> uses the old one (legacy) as default. The legacy format reads: <code>project:dataset.table</code> (notice <code>:</code>) while the newer format goes by: <code>project.dataset.table</code> (with <code>.</code> instead).</p>
<p>It turns out there is a file called <code>.bigqueryrc</code> where you can set a global configuration and tell <code>bq</code> (the command line tool to interact with BigQuery in the terminal) to use the newer format by setting the flag <code>use_legacy_sql=false</code>:</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode toml code-with-copy"><code class="sourceCode toml"><span id="cb1-1"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">credential_file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">path</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">to</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">some</span><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">/</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">file.json</span></span>
<span id="cb1-2"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">project_id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">name-of-your-default-project</span></span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">[query]</span></span>
<span id="cb1-5"><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">use_legacy_sql</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cn" style="color: #8f5902;
background-color: null;
font-style: inherit;">false</span></span></code></pre></div>
<p>The CLI-tool <code>bq</code> also accepts the file as optional argument so you can pass custom config for a query. If you run <code>bq --help</code> you’ll see:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb2-1">  <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">--bigqueryrc:</span> Path to configuration file. The configuration file specifies new</span>
<span id="cb2-2">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">defaults</span> for any flags, and can be overrridden by specifying the flag on the</span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">command</span> line. If the <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">--bigqueryrc</span> flag is not specified, the BIGQUERYRC</span>
<span id="cb2-4">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">environment</span> variable is used. If that is not specified, the path</span>
<span id="cb2-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"~/.bigqueryrc"</span> is used.</span>
<span id="cb2-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">(</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">default:</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'~/.bigqueryrc'</span><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">)</span></span>
<span id="cb2-7">    </span></code></pre></div>
<p>Read more about that in the <a href="https://cloud.google.com/bigquery/docs/reference/bq-cli-reference?hl=en">official documetation</a>.</p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <guid>https://fabridamicelli.github.io/til/bigqueryrc.html</guid>
  <pubDate>Sun, 19 May 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Force Python’s print function to flush the stream</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/til/python-print-flush.html</link>
  <description><![CDATA[ 




<p>Say we have a python program that prints to <code>stdout</code> and we want to write that output into a file.<br>
We can achieve that like this:</p>
<div id="cell-2" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb1-2">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'print("great output</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">as always")'</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.txt</span></code></pre></div>
</div>
<p>Which works fine:</p>
<div id="cell-4" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb2-2">cat <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>.txt</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>great output
as always</code></pre>
</div>
</div>
<p>Now, if we want to do the same <strong>while</strong> the program is still running, things are a bit different.<br>
For example, this program will not write to file until we interrumpt it:</p>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb4-2">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">while True:</span></span>
<span id="cb4-4"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">    print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"great output</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">as always"</span>)<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb4-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt; newfile.txt</span></span></code></pre></div>
</div>
<p>That is, the command on the left side of <code>&gt;</code> will be run until it’s done and only then the file will be written.<br>
We want to fix that.<br>
In other words, stream the program output directly into the file while it’s being generated.</p>
<p>I found this solution to work, passing <code>flush=True</code> to the <code>print</code> function:</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb5-2">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">import time</span></span>
<span id="cb5-4"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">while True:</span></span>
<span id="cb5-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"great output</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">as always"</span>, flush<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;----- HERE</span></span>
<span id="cb5-6">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt; newfile.txt</span></span></code></pre></div>
</div>
<p>As the docstrings say, that forces the stream to be flushed:</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>?</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Docstring:</span>
print(value, ..., sep=' ', end='\n', file=sys.stdout, flush=False)
Prints the values to a stream, or to sys.stdout by default.
Optional keyword arguments:
file:  a file-like object (stream); defaults to the current sys.stdout.
sep:   string inserted between values, default a space.
end:   string appended after the last value, default a newline.
flush: whether to forcibly flush the stream.
<span class="ansi-red-fg">Type:</span>      builtin_function_or_method
</pre>
</div>
</div>
</div>
<section id="update-an-alternative" class="level1">
<h1>Update: An alternative</h1>
<p>It turns out that Python has a parameter we can pass in the command line to make it unbuffered and thus achieving the same results. The parameter is <code>-u</code>, as per official documentation: &gt; Force the stdout and stderr streams to be unbuffered. This option has no effect on the stdin stream.</p>
<p>This is how the code would look like:</p>
<div id="cell-12" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>bash</span>
<span id="cb7-2">python <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>u <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>c <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">import time</span></span>
<span id="cb7-4"><span class="er" style="color: #AD0000;
background-color: null;
font-style: inherit;">while True:</span></span>
<span id="cb7-5">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"great output</span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">\n</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">as always"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- No need for flush=True here anymore</span></span>
<span id="cb7-6">    time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">' </span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb7-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">&gt; newfile.txt</span></span></code></pre></div>
</div>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>

 ]]></description>
  <category>python</category>
  <guid>https://fabridamicelli.github.io/til/python-print-flush.html</guid>
  <pubDate>Mon, 26 Feb 2024 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
