---
title: ""
---

### Python Packages

I created and maintain the following Python packages:

---

::: {layout="[[0.4, 0.6]]"}
### [echoes](https://github.com/fabridamicelli/echoes)
A scikit-learn compatible package for Machine Learning with Echo State Networks  
<a href="https://pepy.tech/project/echoes"><img src="https://pepy.tech/badge/echoes" width="80">
<a href="https://pepy.tech/project/echoes"><img src="https://pepy.tech/badge/echoes/month" height="16">
</a>

  - ü§ñ Machine learning with [Echo State Networks](http://www.scholarpedia.org/article/Echo_state_network) 
  - üß± High level API, scikit-learn compatible API, eg fit-predict interface
  - üí® Fast! (Thanks to [numba](http://numba.pydata.org/) ‚ú®)
  - üêç `pip install echoes`  
:::

---

::: {layout="[[0.4, 0.6]]"}
### [kuramoto](https://github.com/fabridamicelli/kuramoto)
Classical model to study synchronization phenomena  
<a href="https://pepy.tech/project/kuramoto"><img src="https://pepy.tech/badge/kuramoto" width="80">
<a href="https://pepy.tech/project/kuramoto"><img src="https://pepy.tech/badge/kuramoto/month" height="16">
</a>

  - ü§π Implementation of the [Kuramoto model](https://en.wikipedia.org/wiki/Kuramoto_model) on graphs.  
  - üêç `pip install kuramoto`  
::: 

---

::: {layout="[[0.4, 0.6]]"}
### [ser](https://github.com/fabridamicelli/ser)
Susceptible-Excited-Refractory, a dynamical model of spreading excitations  
<a href="https://pepy.tech/project/ser"><img src="https://pepy.tech/badge/ser" width="80">
<a href="https://pepy.tech/project/ser"><img src="https://pepy.tech/badge/ser/month" height="16">
</a>

  - üö• Implementation of classic SER model on graphs
  - üèÉ Powered by [numba](http://numba.pydata.org/) for speed.
  - üêç `pip install ser`  

:::

---

### [torchserve-docker](https://github.com/fabridamicelli/torchserve-docker)
Container images with specific TorchServe **and Python** version working out-of-the-box.
This is a [GitHub-Action-based cron job](https://github.com/fabridamicelli/torchserve-docker) that watches for TorchServe releases and automatically generates and pushed the images to [Dockerhub](https://hub.docker.com/r/fabridamicelli/torchserve).  
<a href="https://hub.docker.com/r/fabridamicelli/torchserve"><img src="https://img.shields.io/docker/pulls/fabridamicelli/torchserve.svg" height="16">

![](/images/torchserve-docker.gif){width=18cm fig-align="center"}

---

### TorchServe
[TorchServe](https://pytorch.org/serve) is a popular framework to deploy PyTorch-based neural networks.
I have [fixed bugs](https://github.com/pytorch/serve/pulls?q=is%3Apr+fabridamicelli+author%3Afabridamicelli) in Dockerfile and build scripts. I have also implemented CI (GitHub) workflows for continuous testing of docker images and containers.

---

### [cronex.nvim](https://github.com/fabridamicelli/cronex.nvim)
[A Neovim Plugin](https://github.com/fabridamicelli/cronex.nvim) to render in-line, human-readable cron expressions.
Cronex is kind of a "client" that allows the Neovim user to integrate and customize "servers" that actually parse the expressions ("explainers") in a flexible fashion.  

![](/images/screencast-cronex.gif){width=18cm fig-align="center"}

---

### [kubeflow-pipeline-uv](https://github.com/fabridamicelli/kubeflow-pipeline-uv)
A simple implementation of a custom component that helps to manage dependencies of Kubeflow components with uv.
Check the [blog post here](https://fabridamicelli.github.io/posts/kubeflow-uv.html) or watch my presentation at PyData Berlin 2025 here:

{{< video https://vimeo.com/1115528220/7073eb4ffb >}}

---

### Other Contributions
- Translation English ‚Üí German of the [HuggingFace Course](https://github.com/huggingface/course/pulls?q=author%3Afabridamicelli)
- Translation English ‚Üí Spanish of the [Python 3.9 Official Documentation](https://github.com/python/python-docs-es/pulls?q=author%3Afabridamicelli+)
- Improving [Website of PyCampES](https://pycamp.es), an event where people meet to code, learn for fun. See my contributions [here](https://github.com/PyCampES/pycampes/pulls?q=author%3Afabridamicelli+)

#### Minor tests/documentation/bug-fixes

```{python}
#| echo: false
#| output: asis

repos = [
    "https://github.com/scikit-learn/scikit-learn",
    "https://github.com/astral-sh/ty",
    "https://github.com/canonical/rockcraft",
    "https://github.com/mainmatter/rust-workshop-runner",
    "https://github.com/basecamp/omakub",
    "https://github.com/carderne/postmodern-mono",
    "https://github.com/fastai/fastai",
    "https://github.com/fastai/fastbook",
    "https://github.com/minodisk/bigquery-runner",
    "https://github.com/ms-jpq/markdown-live-preview",
    "https://github.com/tobi-wan-kenobi/bumblebee-status",
]

USERNAME = "fabridamicelli"
for repo in repos:
    name = repo.removeprefix("https://github.com/")
    if "rockcraft" in repo:
        print(f"- [{name}]({repo}/pulls/{USERNAME})")
    else:
        print(f"- [{name}]({repo}/pulls?q=is%3Amerged+author%3A{USERNAME})")

```

---
For more details, check out my [GitHub Profile](https://github.com/fabridamicelli).
<p align=center><img src=https://ghchart.rshah.org/fabridamicelli width=800 href=https://github.com/fabridamicelli></p>
