<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Fabrizio Damicelli</title>
<link>https://fabridamicelli.github.io/blog.html</link>
<atom:link href="https://fabridamicelli.github.io/blog.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.5.55</generator>
<lastBuildDate>Fri, 26 Jul 2024 00:00:00 GMT</lastBuildDate>
<item>
  <title>Parsing JSON takes time – time is money</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/parse-jsonl.html</link>
  <description><![CDATA[ 




<p>JSON Lines is a common format encountered in modern data applications, as stated in <a href="https://jsonlines.org/">this documentation</a>:</p>
<blockquote class="blockquote">
<p>The JSON Lines text format, also called newline-delimited JSON, is a convenient format for storing structured data that may be processed one record at a time. It’s a great format for log files. It’s also a flexible format for passing messages between cooperating processes.</p>
</blockquote>
<p>For example Google Platform’s BigQuery exports tables in this format per default.</p>
<p>I will cover a few simple tips that can speed up the parsing significantly. I’ve got a file on my computer which contains a ~9600 of such JSON lines.</p>
<p>This is a toy example, as in the real-world workloads I deal with I typically have something like 300 Million JSON Lines to process. So the job might spend literally hours parsing JSON – you guessed right: and each minute running costs 💸.</p>
<div id="19035a39-fef8-4589-bc95-e8a00711ed36" class="cell" data-execution_count="1">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">!</span>wc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>l sample1.jsonl</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>9611 sample1.jsonl</code></pre>
</div>
</div>
<p>Regardless of the very specific content, our data look like this:</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">{</span>
<span id="cb3-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key1"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span></span>
<span id="cb3-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key2"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"hello"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"world"</span>], ...</span>
<span id="cb3-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key3"</span>: [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1231123</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1234192</span>], ...</span>
<span id="cb3-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key4"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"super"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"coool"</span>], ... </span>
<span id="cb3-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"key5"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"very"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"niiice"</span>], ...</span>
<span id="cb3-7">      . </span>
<span id="cb3-8">      .</span>
<span id="cb3-9">      .</span>
<span id="cb3-10">}</span></code></pre></div>
<p>where the lists can be anywhere between 8 and ~4400 length:</p>
<div id="42c5de45-2645-4e87-87ad-7a10be5f5cbe" class="cell" data-execution_count="3">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb4-3"></span>
<span id="cb4-4">lines <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (json.loads(line) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample1.jsonl"</span>).read_text().splitlines())</span>
<span id="cb4-5">minlen, maxlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1e6</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb4-6"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines:</span>
<span id="cb4-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> line.values():</span>
<span id="cb4-8">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">isinstance</span>(v, (<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)):</span>
<span id="cb4-9">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&gt;</span> maxlen:</span>
<span id="cb4-10">                maxlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l</span>
<span id="cb4-11">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> (l<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">:=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(v)) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> minlen:</span>
<span id="cb4-12">                minlen <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> l</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Min length:"</span>, minlen)</span>
<span id="cb4-15"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Max length:"</span>, maxlen)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>Min length: 8
Max length: 4403</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Code benchmarks are always tricky. The tips I will show, I believe, apply in general. But still the relative differences might vary depending on several factors, so you should profile the parsers with your own data to see which variant suits your case best.<br>
Also, I will assume we don’t want to use schema information about the data, i.e., we want it back as as dictionary.</p>
</div>
</div>
<p>For the sake of the comparison, we will have for each method a function that receives a file path and returns a generator of dictionaries (being each dictionary a JSON line in a file). We use a generator to avoid taking into account the time to create a container (e.g., a list).<br>
By the way, that is already our <strong>Tip Number 1: Consume the lines lazily (if you only need them one by one)</strong>, to save memory footprint and time of allocating large container objects.</p>
<div id="331e6116-b320-4a4e-a966-6f902087e9db" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Generator, Callable</span>
<span id="cb6-2"></span>
<span id="cb6-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Path(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample1.jsonl"</span>)</span></code></pre></div>
</details>
</div>
<p>Here’s the canonical “pure-python” way of doing it, using the json module from the standard library:</p>
<div id="72d4bef0-df68-41f8-bb83-aa5b6037ca9c" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_lines_text(p: Path) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb7-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"Notice we read as text"</span></span>
<span id="cb7-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p.read_text().splitlines():</span>
<span id="cb7-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> line</span>
<span id="cb7-5">        </span>
<span id="cb7-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_python(p: Path, line_reader: Callable) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb7-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Since we do not use third-party libraries, I call this _python"""</span></span>
<span id="cb7-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> line_reader(p):</span>
<span id="cb7-9">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> json.loads(line)</span></code></pre></div>
</div>
<div id="120deebb-e7d9-4653-8565-ed014c17b30c" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> traverse_lines(lines: Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb8-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Go through the file, parsing the lines, but doing nothing with them.</span></span>
<span id="cb8-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    We only want to parse them.</span></span>
<span id="cb8-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb8-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> _ <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> lines: <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Consume the generator</span></span>
<span id="cb8-7">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">pass</span></span></code></pre></div>
</div>
<div id="635fe1f4-934e-43c0-955d-97d379545718" class="cell" data-execution_count="33">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb9-2">traverse_lines(</span>
<span id="cb9-3">    read_python(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>, line_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_lines_text)</span>
<span id="cb9-4">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>2.64 s ± 286 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That’s our baseline.</p>
<p><strong>Tip Number 2: Consume bytes directly</strong></p>
<p>Notice our function <code>get_lines_text</code> uses the method <code>read_text</code> to grab the text. That will under the hood first parse the bytes into a string which will then be converted into a dictionary. But we don’t need that! The function <code>json.loads</code> (same as for third-party libraries) accepts bytes as well, so let’s change our <code>get_lines</code> function to read bytes:</p>
<div id="917a6b59-79d9-4557-8755-2cdcf886aa95" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_lines_bytes(p: Path) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb11-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> p.read_bytes().splitlines():</span>
<span id="cb11-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> line</span></code></pre></div>
</div>
<div id="3541f9a4-71ca-4681-9b58-ed132ee8184e" class="cell" data-execution_count="34">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb12-2">traverse_lines(</span>
<span id="cb12-3">    read_python(</span>
<span id="cb12-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,</span>
<span id="cb12-5">        line_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_lines_bytes  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- here!</span></span>
<span id="cb12-6">    )</span>
<span id="cb12-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.82 s ± 79.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That’s ~40% improvement for free – don’t know about you, but I’d take it ;)</p>
<p>But we can push further.</p>
<p><strong>Tip Number 3: Create the stream manually (skip <code>pathlib</code>)</strong><br>
We all love <code>pathlib</code> as it is super handy, but there’s a tiny overhead in this case that can add up (if you have, say, thousands of files to read) – let’s see:</p>
<div id="2d326a70-450d-4f02-b9fa-4736c2e0dd64" class="cell" data-execution_count="37">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> get_lines_bytes_stream(p: Path) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb14-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">with</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">open</span>(p, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"rb"</span>) <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> f:  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># remember we read bytes (the default is "rt": read TEXT!)</span></span>
<span id="cb14-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> f:</span>
<span id="cb14-4">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> line</span></code></pre></div>
</div>
<div id="b7ac5ee7-482c-4f22-bc28-fedb5ca5ca24" class="cell" data-execution_count="39">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb15-2">traverse_lines(</span>
<span id="cb15-3">    read_python(</span>
<span id="cb15-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,</span>
<span id="cb15-5">        line_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_lines_bytes_stream  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- here!</span></span>
<span id="cb15-6">    )</span>
<span id="cb15-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.65 s ± 13.6 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That’s not that much of a big deal, but still, ~10% improvement, for free – I’ll take it!</p>
<p>Starting from here, we’ll see a few libraries beyond the python standard library. Here’s also where you might want to take results with a pinch of salt, as different libraries have different implementations under the hood, which might take advantage of different aspects or structure of the data for optimization. Thus you definitely want to try out with your own data to check the extent to which these following results apply.</p>
<p><strong>Tip Number 4: Use Pydantic’s <code>from_json</code></strong><br>
This little function is a bit of a hidden gem. Almost a drop-in replacement for <code>json.loads</code>:</p>
<div id="a4b389d1-a221-4a81-82a8-5de1dac3e931" class="cell" data-execution_count="41">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic_core <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> from_json</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_pydantic(p: Path, line_reader: Callable) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb17-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> line_reader(p):</span>
<span id="cb17-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> from_json(line, cache_strings<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"keys"</span>)</span></code></pre></div>
</div>
<div id="e0920210-0c9a-4af9-b834-4e5581c4212d" class="cell" data-execution_count="43">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb18-2">traverse_lines(</span>
<span id="cb18-3">    read_pydantic(</span>
<span id="cb18-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,</span>
<span id="cb18-5">        line_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_lines_bytes_stream</span>
<span id="cb18-6">    )</span>
<span id="cb18-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>1.22 s ± 74.3 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That’s another 25% improvement (on top of what we already had so far). Not bad, I’d say.</p>
<p><strong>Tip Number 5: Use <code>msgspec</code></strong><br>
The performance of this library has blown my mind already a few times in the past and unfortunately it lives a bit in the shadows of more visible frameworks, but I think it deserves much more attention!</p>
<div id="4710f53f-bfd8-4548-8af1-805476907c4a" class="cell" data-execution_count="51">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> msgspec</span>
<span id="cb20-2"></span>
<span id="cb20-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_msgspec(p: Path, line_reader: Callable) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb20-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> line_reader(p):</span>
<span id="cb20-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> msgspec.json.decode(line)</span>
<span id="cb20-6">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># you could also instantiate the decoder outside </span></span>
<span id="cb20-7">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># of the function once (msgspec.json.Decoder())</span></span>
<span id="cb20-8">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># and call .decode() method here.</span></span>
<span id="cb20-9">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># For this use case, I didn't find that to have </span></span>
<span id="cb20-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># a better performance.</span></span></code></pre></div>
</div>
<div id="fc522cf5-a1e4-41b8-be6b-4cd152b2a201" class="cell" data-execution_count="52">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb21-2">traverse_lines(</span>
<span id="cb21-3">    read_msgspec(</span>
<span id="cb21-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,</span>
<span id="cb21-5">        line_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_lines_bytes_stream</span>
<span id="cb21-6">    )</span>
<span id="cb21-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>989 ms ± 13.4 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>Almost 20% faster than the previous solution – and we are still talking about almost drop-in replacements!</p>
<p><strong>Tip Number 6: Use <code>orjson</code></strong><br>
This is a popular library, claiming to be the fastest JSON parser, let’s see:</p>
<div id="adfc1a37-2f02-4a26-9d4f-3a6137b7ecb6" class="cell" data-execution_count="54">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> orjson</span>
<span id="cb23-2"></span>
<span id="cb23-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> read_orjson(p: Path, line_reader: Callable) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> Generator[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>]:</span>
<span id="cb23-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> line <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> line_reader(p):</span>
<span id="cb23-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">yield</span> orjson.loads(line)</span></code></pre></div>
</div>
<div id="7df7ecf4-f898-4ca3-8753-f621063c3460" class="cell" data-execution_count="55">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb24-2">traverse_lines(</span>
<span id="cb24-3">    read_orjson(</span>
<span id="cb24-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>,</span>
<span id="cb24-5">        line_reader<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>get_lines_bytes_stream</span>
<span id="cb24-6">    )</span>
<span id="cb24-7">)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>863 ms ± 5.01 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>We keep stacking improvements: ~13% faster than the previous solution.</p>
<p>To sum up, we managed to push down the parsing time from ~2.64 seconds (or 1.82 seconds if we exclude the “naive” case reading text) to ~0.85 seconds. <strong>All in all that means more than 3 times faster!</strong> (or more than 2 if we just read bytes).<br>
A quick back-of-the-envelope calculation for my concrete, full use case results in reducing the running time by almost 10 hours, which can definitely mean some money depending on the hardware being used (for example GPUs).</p>
<p><strong>Bonus Tip: Use <code>polars</code></strong></p>
<p>We only considered the case reading and parsing the lines into a dictionary.<br>
But if you don’t mind having the data in a <a href="https://github.com/pola-rs/polars">polars</a> dataframe you can try it out:</p>
<div id="edc8a4a8-8989-469e-87b5-414848273a01" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> polars <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pl</span></code></pre></div>
</div>
<div id="bcf145a5-7c1d-4e8f-b965-42f816e9c3d7" class="cell" data-execution_count="69">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb27-2">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pl.scan_ndjson(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">file</span>).collect(streaming<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 4.56 s, sys: 729 ms, total: 5.29 s
Wall time: 900 ms</code></pre>
</div>
</div>
<p>Here are the links to the third-party libraries.<br>
Go show them some gratitude for their contributions to the community! ❤️</p>
<ul>
<li><a href="https://github.com/pydantic/pydantic-core">pydantic-core</a></li>
<li><a href="https://github.com/jcrist/msgspec">msgspec</a></li>
<li><a href="https://github.com/ijl/orjson">orjson</a></li>
<li><a href="https://github.com/pola-rs/polars">polars</a></li>
</ul>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <category>json</category>
  <guid>https://fabridamicelli.github.io/posts/parse-jsonl.html</guid>
  <pubDate>Fri, 26 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Fast(er)API: Optimizing Processing Time</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/optimize-fastapi.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled" title="Summary">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Summary
</div>
</div>
<div class="callout-body-container callout-body">
<p>If parsing and validating the request significantly contributes to the processing time, there might be room to optimize your FastAPI REST API. The key is to use directly Starlette at one or two spots and to leverage some of Pydantic’s magic to accelerate validation.</p>
</div>
</div>
<p>Part of <a href="https://fastapi.tiangolo.com/">FastAPI</a>’s merit is how well it leverages other tools to serve its purpose. FastAPI adds the layers it needs on top of them to deliver all the niceties that make the framework so popular these days. Of course, one of them is right in the name: It’s <em>fast</em>. Such speed comes to a great extent from <a href="https://www.starlette.io/">Starlette</a>, a minimal web framework used by FastAPI under the hood and <a href="https://docs.pydantic.dev/latest/">Pydantic</a>, used for data validation, serialization, etc.</p>
<p>It turns out that sometimes we can tweak those tools directly (even inside of a FastAPI application) in order to make things go even faster. I will show a few pretty simple tricks to speed up your app without adding much complexity, provided we can compromise a bit of FastAPI’s ergonomics in return.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Shout-Out">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Shout-Out
</div>
</div>
<div class="callout-body-container callout-body">
<p>Most of what you’re about to read I learnt in conversation with <a href="https://github.com/Kludex">Marcelo Trylesinski</a> at Europython 2024. He’s deeply involved with all above mentioned projects and generously took some time to code and debug stuff with me.<br>
Thank you, Marcelo! 🧉</p>
</div>
</div>
<section id="a-simple-baseline" class="level1">
<h1>🎬 A Simple Baseline</h1>
<p>Let’s create a little FastAPI app to demonstrate the optimizations. Our fake app will receive a list of items, each item having a name and a price. For the sake of just doing some computation with the request content, our “microservice” will re-calculate the price for each item and return the list with new prices (just random changes).</p>
<p>Importantly, we want to validate both the input and the output data. This is one of the niceties of FastAPI: By defining <code>response_model</code> and passing the type of the <code>request</code> argument, FastAPI will know what we want and will use them automatically.</p>
<div class="callout callout-style-default callout-note callout-titled" title="Note">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>I will repeat my self a bit in the definitions of each app. The idea is to have self-contained code in each case that will be written to a file to be run from there in the command line.</p>
</div>
</div>
<div id="b05655d4-5d45-41a7-962c-11d52360ed31" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> requests</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> make_fake_payload(n):</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb1-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: [</span>
<span id="cb1-11">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"id_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>: i}</span>
<span id="cb1-12">            <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(n)</span>
<span id="cb1-13">        ]</span>
<span id="cb1-14">    }</span>
<span id="cb1-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create fake payload for profiling</span></span>
<span id="cb1-16">payload <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_fake_payload(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>)</span>
<span id="cb1-17"></span>
<span id="cb1-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> do_request(payload, url):</span>
<span id="cb1-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> requests.post(url, json<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>payload)</span>
<span id="cb1-20"></span>
<span id="cb1-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> print_times(timings):</span>
<span id="cb1-22">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Mean:"</span>, np.mean(timings).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span>
<span id="cb1-23">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P99:"</span>, np.percentile(timings, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>))</span></code></pre></div>
</details>
</div>
<div id="224c44b4-9984-4dbf-941e-863a75880625" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>writefile pricing.py</span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> random</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We will import this in all our apps</span></span>
<span id="cb2-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> reprice(items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>]) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>]:</span>
<span id="cb2-7">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Simulate a reprice strategy"""</span></span>
<span id="cb2-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> [</span>
<span id="cb2-9">        {</span>
<span id="cb2-10">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>],</span>
<span id="cb2-11">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"price"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> random.random(), <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-12">        }</span>
<span id="cb2-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> items</span>
<span id="cb2-14">    ]</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting pricing.py</code></pre>
</div>
</div>
<div id="42cd0522-6dcc-4ca0-a090-852bf5776e78" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>writefile app.py</span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb4-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uvicorn</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pricing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> reprice</span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define custom Request and Response Pydantic model</span></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Item(BaseModel):</span>
<span id="cb4-12">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb4-13">    price: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomRequest(BaseModel):</span>
<span id="cb4-16">    items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Item]</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomResponse(BaseModel):</span>
<span id="cb4-19">    items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Item]</span>
<span id="cb4-20"></span>
<span id="cb4-21">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb4-22"></span>
<span id="cb4-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/pricing"</span>, response_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CustomResponse)</span>
<span id="cb4-24"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fix_price(request: CustomRequest):</span>
<span id="cb4-25">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: reprice(request.model_dump()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>])}</span>
<span id="cb4-26"></span>
<span id="cb4-27"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-28">    uvicorn.run(app, host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span>, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>, log_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting app.py</code></pre>
</div>
</div>
<p>We launch the app in the background with</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode bash code-with-copy"><code class="sourceCode bash"><span id="cb6-1"><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">python</span> app.py</span></code></pre></div>
<p>so that we can timeit from here:</p>
<div id="df25f3c6-b59b-466a-8f3a-fc9a8613193a" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(payload, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://0.0.0.0:8000/pricing"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>69.9 ms ± 3.28 ms per loop (mean ± std. dev. of 20 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="ae9260ed-08c0-4a23-84c9-9017364d3837" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">print_times(times.timings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean: 0.07
P99: 0.08</code></pre>
</div>
</div>
<p>That’s our baseline.<br>
We can do better.</p>
</section>
<section id="bring-starlette-and-pydantic-to-the-front" class="level1">
<h1>🎩 Bring Starlette and Pydantic to the Front</h1>
<p>We will read the bytes directly from the request body and build the Pydantic model ourselves. The reason for that is that Pydantic can directly parse the bytes into a Pydantic model, thus skipping the deserialization into a Python dict first. We will also let Pydantic serialize the model and wrap it as a Starlette’s response.</p>
<div id="9a4cf33c-fe35-4457-8658-09ec44de324e" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>writefile app_starlette_body.py</span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb11-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb11-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uvicorn</span>
<span id="cb11-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb11-7">    FastAPI,</span>
<span id="cb11-8">    Request,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This comes directly from Starlette!</span></span>
<span id="cb11-9">    Response, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This too</span></span>
<span id="cb11-10">)</span>
<span id="cb11-11"></span>
<span id="cb11-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pricing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> reprice</span>
<span id="cb11-13"></span>
<span id="cb11-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Define custom Request and Response Pydantic model</span></span>
<span id="cb11-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Item(BaseModel):</span>
<span id="cb11-16">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb11-17">    price: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb11-18"></span>
<span id="cb11-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomRequest(BaseModel):</span>
<span id="cb11-20">    items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Item]</span>
<span id="cb11-21"></span>
<span id="cb11-22"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomResponse(BaseModel):</span>
<span id="cb11-23">    items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Item]</span>
<span id="cb11-24"></span>
<span id="cb11-25">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb11-26"></span>
<span id="cb11-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/pricing"</span>)</span>
<span id="cb11-28"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fix_price(request: Request):</span>
<span id="cb11-29">    body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> request.body()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the bytes from request</span></span>
<span id="cb11-30">    req <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomRequest.model_validate_json(body)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate input</span></span>
<span id="cb11-31">    resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomResponse(  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate output</span></span>
<span id="cb11-32">        items<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>reprice(req.model_dump()[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>])</span>
<span id="cb11-33">    )</span>
<span id="cb11-34">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response(resp.model_dump_json())</span>
<span id="cb11-35"></span>
<span id="cb11-36"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb11-37">    uvicorn.run(app, host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span>, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8001</span>, log_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting app_starlette_body.py</code></pre>
</div>
</div>
<div id="e95f9ebb-e34e-4e8e-ab24-1874a559ed62" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(payload, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://0.0.0.0:8001/pricing"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>62.7 ms ± 2.97 ms per loop (mean ± std. dev. of 20 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="4220559c-2333-4b11-88b0-2e7430577043" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">print_times(times.timings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean: 0.063
P99: 0.069</code></pre>
</div>
</div>
<p>We cut around 10ms – not bad!</p>
<p>But we can still do better.</p>
</section>
<section id="magic-pydantics-typeadapter" class="level1">
<h1>🪄 Magic: Pydantic’s TypeAdapter</h1>
<p>This solution I’d argue is a bit more involved, so you might really first make sure that you really need/want to optimize further. In any case, I think the complexity is not that much higher, so it might be definitely worth trying it.</p>
<p>We will drop the <code>BaseModel</code> from Pydantic (which is what gives us the data validation under the hood). Instead we’ll use <code>TypedDict</code> and Pydantic’s <code>TypeAdapter</code>.</p>
<p>Fasten your seatbelt! 🚀</p>
<div id="801c432e-1bb3-4710-8506-b607d991882f" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>writefile app_type_adapter.py</span>
<span id="cb17-2"></span>
<span id="cb17-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb17-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> uvicorn</span>
<span id="cb17-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TypeAdapter</span>
<span id="cb17-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing_extensions <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TypedDict  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># From python 3.12 on you can import from typing</span></span>
<span id="cb17-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> (</span>
<span id="cb17-8">    FastAPI,</span>
<span id="cb17-9">    Request,  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This comes directly from Starlette!</span></span>
<span id="cb17-10">    Response, <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This too</span></span>
<span id="cb17-11">)</span>
<span id="cb17-12"></span>
<span id="cb17-13"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pricing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> reprice</span>
<span id="cb17-14"></span>
<span id="cb17-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notice we use TypedDict instead of BaseModel!</span></span>
<span id="cb17-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> Item(TypedDict):</span>
<span id="cb17-17">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb17-18">    price: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb17-19">    </span>
<span id="cb17-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notice we use TypedDict instead of BaseModel!</span></span>
<span id="cb17-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomRequest(TypedDict):</span>
<span id="cb17-22">    items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Item]</span>
<span id="cb17-23"></span>
<span id="cb17-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Notice we use TypedDict instead of BaseModel!</span></span>
<span id="cb17-25"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomResponse(TypedDict):</span>
<span id="cb17-26">    items: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>[Item]</span>
<span id="cb17-27"></span>
<span id="cb17-28">ta_item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeAdapter(Item)</span>
<span id="cb17-29">ta_request <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeAdapter(CustomRequest)</span>
<span id="cb17-30">ta_response <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TypeAdapter(CustomResponse)</span>
<span id="cb17-31"></span>
<span id="cb17-32">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb17-33"></span>
<span id="cb17-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/pricing"</span>)</span>
<span id="cb17-35"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">async</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> fix_price(request: Request):</span>
<span id="cb17-36">    body <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">await</span> request.body()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Grab the bytes from request</span></span>
<span id="cb17-37">    req <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ta_request.validate_json(body) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Validate input</span></span>
<span id="cb17-38">    resp <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ta_response.validate_python(  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">#  Validate output</span></span>
<span id="cb17-39">        {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>: reprice(req[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"items"</span>])}</span>
<span id="cb17-40">    )</span>
<span id="cb17-41">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> Response(ta_response.dump_json(resp))</span>
<span id="cb17-42"></span>
<span id="cb17-43"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb17-44">    uvicorn.run(app, host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span>, port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8002</span>, log_level<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"error"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Overwriting app_type_adapter.py</code></pre>
</div>
</div>
<div id="513cb429-9052-49eb-8338-15a0ca8838bf" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(payload, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://0.0.0.0:8002/pricing"</span>)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>25.6 ms ± 2.03 ms per loop (mean ± std. dev. of 20 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="13f44308-60cb-44ee-a919-253034d1440a" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1">print_times(times.timings)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Mean: 0.026
P99: 0.031</code></pre>
</div>
</div>
<p>We cut the response more or less by half! 🤯<br>
I think that’s pretty impressive.</p>
<p>Here’s the global comparison of response times:</p>
<div id="38461dac-7635-443f-be1e-341e998b5cb7" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">vanilla <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(payload, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://0.0.0.0:8000/pricing"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>70.6 ms ± 2 ms per loop (mean ± std. dev. of 20 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="a33aef7e-af09-4aa9-b920-2e7f9bc38bbc" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">plain_star <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(payload, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://0.0.0.0:8001/pricing"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>60.7 ms ± 2.19 ms per loop (mean ± std. dev. of 20 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="6ba64f10-cedb-4b91-aeaa-7d2b53ad1e96" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">typed_adap <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(payload, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://0.0.0.0:8002/pricing"</span>)</span></code></pre></div>
</details>
<div class="cell-output cell-output-stdout">
<pre><code>23.4 ms ± 1.14 ms per loop (mean ± std. dev. of 20 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="61c9ccf9-aa69-463d-af1b-6b4ad000b2ba" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([</span>
<span id="cb29-2">    pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>: vanilla.timings}).assign(Variant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vanilla FastAPI"</span>),</span>
<span id="cb29-3">    pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>: plain_star.timings}).assign(Variant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starlette &amp; Pydantic"</span>),</span>
<span id="cb29-4">    pd.DataFrame({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>: typed_adap.timings}).assign(Variant<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TypedDict &amp; TypeAdapter"</span>)</span>
<span id="cb29-5">])</span>
<span id="cb29-6"></span>
<span id="cb29-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> P99(x):</span>
<span id="cb29-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.percentile(x, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">99</span>)</span>
<span id="cb29-9"></span>
<span id="cb29-10">(df</span>
<span id="cb29-11"> .groupby(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Variant'</span>, as_index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb29-12"> .agg([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mean"</span>, P99])</span>
<span id="cb29-13"> .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-14"> .sort_values(by<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"P99"</span>), ascending<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb29-15"> .reset_index(drop<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb29-16">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Variant</th>
<th colspan="2" data-quarto-table-cell-role="th" data-halign="left">Time</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">mean</th>
<th data-quarto-table-cell-role="th">P99</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>Vanilla FastAPI</td>
<td>0.070603</td>
<td>0.075128</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>Starlette &amp; Pydantic</td>
<td>0.060742</td>
<td>0.066975</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>TypedDict &amp; TypeAdapter</td>
<td>0.023436</td>
<td>0.026576</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
</section>
<section id="who-cares-about-50ms" class="level1">
<h1>⏱️ Who cares about 50ms?</h1>
<p>Fair question. I presented here a simplified, toy example of the REST API that I actually had to run production.<br>
The real-world use case included a lookup step on a Sqlite database which took around 30/40ms. So the speed up I just showed can be equivalent in time to skipping the lookup altogether!<br>
The reason why that’s big deal is that the real-world microservice was supposed to respond under 100ms (P99), thus cutting 50ms is saving ~50% of our response time “budget”.</p>
</section>
<section id="how-much-bang-for-the-buck-scaling" class="level1">
<h1>📈 How much bang for the buck: Scaling</h1>
<p>Going back to the initial statement: These optimizations might not make sense if your processing time does not depend on the payload size (for example, because the payloads in your application are so small that you cannot squeeze much performance out of it).</p>
<p>To demonstrate that, we can run a quick experiment to compare the performance of the different variants of the app that we presented above. We will simply measure the mean response time as a function of the payload size.</p>
<div id="31e87fd6-3d55-4b19-ba50-a36de0bec31a" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">ns <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb30-2">var2port <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fapi"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starl"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8001</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typdct"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8002</span>}</span>
<span id="cb30-3">n2payload <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {n: make_fake_payload(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ns}</span>
<span id="cb30-4">res <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb30-5"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> var, port <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> var2port.items():</span>
<span id="cb30-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> ns:</span>
<span id="cb30-7">        times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span>timeit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>o <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>r <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span> do_request(n2payload[n], <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"http://0.0.0.0:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>port<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/pricing"</span>)</span>
<span id="cb30-8">        res[(var, n)] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.mean(times.timings).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>)</span></code></pre></div>
</details>
</div>
<div id="e767ea47-e27a-41ef-847f-6535f970a097" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb31-2">sns.set_style(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"whitegrid"</span>)</span>
<span id="cb31-3"></span>
<span id="cb31-4">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame(</span>
<span id="cb31-5">    [(var, n, time) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> (var, n), time <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> res.items()],</span>
<span id="cb31-6">    columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Variant"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payload Size"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response Time (s)"</span>]</span>
<span id="cb31-7">)</span>
<span id="cb31-8">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> data.replace({</span>
<span id="cb31-9">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fapi"</span>:<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Vanilla FastAPI"</span>,</span>
<span id="cb31-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"starl"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Starlette &amp; Pydantic"</span>,</span>
<span id="cb31-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"typdct"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"TypedDict &amp; TypeAdapter"</span>,</span>
<span id="cb31-12">})</span>
<span id="cb31-13"></span>
<span id="cb31-14">sns.lineplot(</span>
<span id="cb31-15">    data<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>data,</span>
<span id="cb31-16">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Payload Size"</span>,</span>
<span id="cb31-17">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Response Time (s)"</span>,</span>
<span id="cb31-18">    hue<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Variant"</span></span>
<span id="cb31-19">)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2024-07-13-optimize-fastapi_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>What does that tell us?<br>
We see that the <code>Starlette &amp; Pydantic</code> optimization will reduce the processing time only by more or less a fix amount (at least for the tested range). So the larger the input, the less impact of the optimization, i.e.&nbsp;the less it will pay off to refactor the code.<br>
On the other hand, the version <code>TypedDict &amp; TypeAdapter</code> has really a different, better scaling relationship. This means that such optimization will always pay off, since the larger payload, the larger absolute time save.</p>
<p>Having said that, what I presented should simply be taken into account as an heuristic to search for optimizations in your code (only if you really need them!). You have to benchmark your code to decide if any of this makes sense for your use case.</p>
</section>
<section id="one-last-word-theres-no-free-lunch" class="level1">
<h1>🤷 One last word: There’s no free lunch</h1>
<p>Unfortunately, by stripping away the custom type hints and using the plain classes <code>Request</code> (from Starlette) and <code>TypedDict+TypeAdapter</code>, we loose the information that FastAPI uses to generate the automatic documentation based on the openapi spec (do notice though that the data validation still works!). It will be up to you to decide if you can live with that and/or the performance gain is worth it.</p>
<p>Here’s how this looks like (on the right is the version with all the optimizations):</p>
<p><img align="center" src="https://fabridamicelli.github.io/images/swagger.png" style="height:35%;"></p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>FastAPI</category>
  <category>Starlette</category>
  <category>Pydantic</category>
  <guid>https://fabridamicelli.github.io/posts/optimize-fastapi.html</guid>
  <pubDate>Sat, 13 Jul 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Efficient Deserialization of Numpy Arrays</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/np-array-tobytes.html</link>
  <description><![CDATA[ 




<div class="callout callout-style-default callout-note callout-titled" title="TL;DR">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
TL;DR
</div>
</div>
<div class="callout-body-container callout-body">
<p>Numpy’s bytes format can be considerably faster than other formats to deserialize. When storing/retrieving vectors arrays just use the methods <code>array.tobytes()</code> and <code>numpy.frombuffer()</code> (instead of, for example, <code>pickle.dumps/loads</code>).</p>
</div>
</div>
<section id="the-situation" class="level1">
<h1>The Situation</h1>
<p>Let’s say you have a bunch of entities, e.g.&nbsp;product-ids of on online shop, for which you have a vector representation (think for example of a word or an image embedding) stored somewhere like a database.</p>
<p>Now it’s time to put your model in production and you need to retrieve the vectors from the database in order to deliver your predictions (for example, you might need to get an embedding representation of product images in order to calculate similarities and show product recommendations). The most typical (and probably sane thing to do) is to have an <a href="https://sqlite.org/">sqlite database</a> for storage.</p>
<p>It turns out, we can store the vectors in different formats and which format we use can <strong>heavily</strong> affect the retrieval (loading and deserialization) speed in our application. That can be critical if your predictions behind your use-case need to be fast (e.g.&nbsp;under 100ms).</p>
<p>Let’s create some fake data consisting of vectors of length 256 filled with random numbers. We will use that data to profile the retrieval (from the database) performance of different formats.</p>
<div id="3af0448c-b58f-42ef-b524-2eeab1566beb" class="cell" data-execution_count="1">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pathlib <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Path</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> json</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> sqlite3</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pickle</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span></code></pre></div>
</details>
</div>
<div id="365fdce8-490e-44ae-aefc-2632fe7dbef1" class="cell" data-execution_count="2">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20_000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">256</span>))</span>
<span id="cb2-2">data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"id_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>: vec <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">enumerate</span>(vectors)}</span>
<span id="cb2-3">data[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_0"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="2">
<pre><code>array([0.93501425, 0.70911416, 0.54255025, 0.84465434, 0.92316   ])</code></pre>
</div>
</div>
<section id="store-vectors-as-text" class="level2">
<h2 class="anchored" data-anchor-id="store-vectors-as-text">Store Vectors as Text</h2>
<p>Our first option is to just dump the numbers into the database as text.</p>
<div id="9338d57c-77a8-458c-88d6-3c8affc21de7" class="cell" data-execution_count="3">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dump_vectors_as_json(data, db_path):</span>
<span id="cb4-2">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(db_path)</span>
<span id="cb4-3">    cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb4-4">    cur.execute(</span>
<span id="cb4-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb4-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CREATE TABLE vectors (</span></span>
<span id="cb4-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    id TEXT PRIMARY KEY,</span></span>
<span id="cb4-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    vector TEXT</span></span>
<span id="cb4-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb4-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb4-11">    )</span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pid, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.items():</span>
<span id="cb4-13">        db_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> json.dumps(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(vec))</span>
<span id="cb4-14">        cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INSERT INTO vectors VALUES (?,?)"</span>, (pid, db_vec))</span>
<span id="cb4-15">        conn.commit()</span>
<span id="cb4-16">    conn.close()</span></code></pre></div>
</div>
<div id="335874a1-4728-448f-b9da-f66022aaf632" class="cell" data-execution_count="4">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">path_json <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/embeddings-json.db"</span></span>
<span id="cb5-2">Path(path_json).unlink()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start fresh</span></span>
<span id="cb5-3">dump_vectors_as_json(data, path_json)</span></code></pre></div>
</div>
<p>Now let’s take a look at the data by querying specific 5000 ids:</p>
<div id="c6d3ff3f-7025-4df9-b932-5b342581a00f" class="cell" data-execution_count="5">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"id_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5000</span>)]</span>
<span id="cb6-2">ids[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="5">
<pre><code>['id_0', 'id_1', 'id_2', 'id_3', 'id_4']</code></pre>
</div>
</div>
<div id="ea1bcae7-6324-472b-a517-b4ba7fc9155b" class="cell" data-execution_count="6">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_vectors_from_db(db_path, ids):</span>
<span id="cb8-2">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"file:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>db_path<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">?mode=ro"</span>, uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb8-3">    cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb8-4">    placeholder <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"(</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">','</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>join(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'?'</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(ids))<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">)"</span></span>
<span id="cb8-5">    out <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cur.execute(</span>
<span id="cb8-6">        <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb8-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        SELECT * FROM vectors</span></span>
<span id="cb8-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        WHERE id in </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>placeholder<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb8-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        """</span>,</span>
<span id="cb8-10">        ids</span>
<span id="cb8-11">    ).fetchall()</span>
<span id="cb8-12">    conn.close() </span>
<span id="cb8-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>(out)</span></code></pre></div>
</div>
<div id="f5accefd-fc43-4ae7-b763-f8aebab2b0b7" class="cell" data-execution_count="9">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> id_, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> load_vectors_from_db(path_json,ids).items():</span>
<span id="cb9-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(id_, json.loads(vec)[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>])  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># show only first 3 values</span></span>
<span id="cb9-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>id_0 [0.9350142536057673, 0.7091141633646703, 0.5425502463856475]</code></pre>
</div>
</div>
<p>Looks fine, but we cannot do much with the values as text, let’s convert them back into numpy arrays:</p>
<div id="d2b27d75-0b87-469f-a1b0-04c3e834a310" class="cell" data-execution_count="10">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">vecs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {id_: np.array(json.loads(vec)) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> id_, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> load_vectors_from_db(path_json,ids).items()}</span>
<span id="cb11-2">vecs[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id_0"</span>][:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="10">
<pre><code>array([0.93501425, 0.70911416, 0.54255025, 0.84465434, 0.92316   ,
       0.04012891, 0.38365326, 0.69617891, 0.93489605, 0.32225334])</code></pre>
</div>
</div>
<p>We should wrap that up into a function for later comparison:</p>
<div id="78894cdd-8ca4-46d2-bc51-4979149e1386" class="cell" data-execution_count="11">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> deserialize_json(vec):</span>
<span id="cb13-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.array(json.loads(vec))</span>
<span id="cb13-3"></span>
<span id="cb13-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> load_and_deserialize(db_path, ids, deserialize_func):</span>
<span id="cb13-5">    loaded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_vectors_from_db(db_path, ids)</span>
<span id="cb13-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {id_: deserialize_func(vec) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> id_, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> loaded.items()}</span></code></pre></div>
</div>
<div id="97ef81bd-2f6c-429d-a588-315fa0b9e107" class="cell" data-execution_count="12">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> load_and_deserialize(path_json, ids[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>], deserialize_json).items():</span>
<span id="cb14-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k, v[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>id_0 [0.93501425 0.70911416 0.54255025 0.84465434 0.92316   ]
id_1 [0.73054276 0.69741267 0.71045242 0.41007697 0.27032626]
id_2 [0.02500795 0.20845864 0.90890601 0.71998367 0.33240879]
id_3 [0.48994333 0.24024084 0.62285499 0.18298199 0.34209958]</code></pre>
</div>
</div>
<p>That’s alright, let’s quickly check how long it takes for all our 5000 ids:</p>
<div id="f4433a83-7166-499f-9477-8b76f3438cb4" class="cell" data-execution_count="13">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb16-2">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_and_deserialize(path_json, ids, deserialize_json)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>362 ms ± 3.57 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<p>That might be good enough. But we can definitely do much better (without paying much of a complexity price).</p>
</section>
<section id="store-vectors-in-binary-format-pickle" class="level2">
<h2 class="anchored" data-anchor-id="store-vectors-in-binary-format-pickle">Store Vectors in Binary Format: Pickle</h2>
<p>We can store the arrays directly as binary data in the database.</p>
<div id="a4077b05-dd7f-4b7c-80d0-77a18c168f51" class="cell" data-execution_count="15">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dump_vectors_as_pickle_blob(data, db_path):</span>
<span id="cb18-2">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(db_path)</span>
<span id="cb18-3">    cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb18-4">    cur.execute(</span>
<span id="cb18-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb18-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CREATE TABLE vectors (</span></span>
<span id="cb18-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    id TEXT PRIMARY KEY,</span></span>
<span id="cb18-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    vector BLOB</span></span>
<span id="cb18-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb18-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb18-11">    )</span>
<span id="cb18-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pid, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.items():</span>
<span id="cb18-13">        db_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pickle.dumps(vec)</span>
<span id="cb18-14">        cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INSERT INTO vectors VALUES (?,?)"</span>, (pid, db_vec))</span>
<span id="cb18-15">        conn.commit()</span>
<span id="cb18-16">    conn.close()</span></code></pre></div>
</div>
<div id="3e575c0e-8789-42ba-824f-94a03858c99d" class="cell" data-execution_count="16">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">path_pickle <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/embeddings-pickle.db"</span></span>
<span id="cb19-2">Path(path_pickle).unlink() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start fresh</span></span></code></pre></div>
</div>
<div id="c2e72509-d09b-4fee-9a34-213e5404cb41" class="cell" data-execution_count="17">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">dump_vectors_as_pickle_blob(data, path_pickle)</span></code></pre></div>
</div>
<p>We need another function to deserialize them:</p>
<div id="a0bbadd4-6139-4832-adf7-36557fa0b9b2" class="cell" data-execution_count="18">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> deserialize_pickle(vec):</span>
<span id="cb21-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> pickle.loads(vec)</span></code></pre></div>
</div>
<div id="7ee1bd37-ab5b-419c-afb2-2b8462a3767b" class="cell" data-execution_count="19">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> load_and_deserialize(path_pickle, ids[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], deserialize_pickle).items():</span>
<span id="cb22-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k,v[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>id_0 [0.93501425 0.70911416 0.54255025 0.84465434 0.92316   ]
id_1 [0.73054276 0.69741267 0.71045242 0.41007697 0.27032626]</code></pre>
</div>
</div>
<p>What does our clock say?</p>
<div id="ce08c6fe-9c46-420c-af57-af993621c916" class="cell" data-execution_count="20">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb24-2"></span>
<span id="cb24-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_and_deserialize(path_pickle, ids, deserialize_pickle)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>40.8 ms ± 2.23 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>That’s roughly more than 10 times faster. We’re cruising :)</p>
<p>But we can still do better. After all we are working with numpy arrays, so we can avoid the pickling path altogether.</p>
</section>
<section id="store-vectors-in-binary-format-numpy-bytes" class="level2">
<h2 class="anchored" data-anchor-id="store-vectors-in-binary-format-numpy-bytes">Store Vectors in Binary Format: Numpy Bytes</h2>
<p>Numpy arrays have a method called <code>.tobytes</code> that does the job:</p>
<div id="02213335-bda6-4508-b544-8be67d6301b5" class="cell" data-execution_count="21">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">arr <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">5.</span>)</span>
<span id="cb26-2">arr</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="21">
<pre><code>array([0., 1., 2., 3., 4.])</code></pre>
</div>
</div>
<div id="e3acd345-e2b5-411c-a656-7838789a9bf0" class="cell" data-execution_count="22">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">buf <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> arr.tobytes()</span>
<span id="cb28-2">buf</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="22">
<pre><code>b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xf0?\x00\x00\x00\x00\x00\x00\x00@\x00\x00\x00\x00\x00\x00\x08@\x00\x00\x00\x00\x00\x00\x10@'</code></pre>
</div>
</div>
<div id="87b56d9e-f84e-4b4d-89da-c03bab32a6e5" class="cell" data-execution_count="23">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">np.frombuffer(buf)</span></code></pre></div>
<div class="cell-output cell-output-display" data-execution_count="23">
<pre><code>array([0., 1., 2., 3., 4.])</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>When calling <code>.tobytes()</code> numpy does not store information about the data type. The default of <code>np.frombuffer</code> is <code>np.float64</code>. But if that does not match your data, the loaded data will be wrong! Make sure to explicitely pass the <code>dtype</code> argument <code>np.frombuffer(..., dtype=YOUR-TYPE)</code> for it to work properly.</p>
</div>
</div>
<div id="7b14110a-8365-413f-aebf-abde44ea7974" class="cell" data-execution_count="24">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dump_vectors_as_npbytes_blob(data, db_path):</span>
<span id="cb32-2">    conn <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sqlite3.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(db_path)</span>
<span id="cb32-3">    cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> conn.cursor()</span>
<span id="cb32-4">    cur.execute(</span>
<span id="cb32-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb32-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    CREATE TABLE vectors (</span></span>
<span id="cb32-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    id TEXT PRIMARY KEY,</span></span>
<span id="cb32-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    vector BLOB</span></span>
<span id="cb32-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    )</span></span>
<span id="cb32-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb32-11">    )</span>
<span id="cb32-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> pid, vec <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> data.items():</span>
<span id="cb32-13">        db_vec <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> vec.tobytes()   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- HERE</span></span>
<span id="cb32-14">        cur.execute(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"INSERT INTO vectors VALUES (?,?)"</span>, (pid, db_vec))</span>
<span id="cb32-15">        conn.commit()</span>
<span id="cb32-16">    conn.close()</span>
<span id="cb32-17"></span>
<span id="cb32-18"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> deserialize_npbytes(buf,dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.float64):</span>
<span id="cb32-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.frombuffer(buf, dtype<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dtype)</span></code></pre></div>
</div>
<div id="e40eb2d0-534b-47fd-a30e-b1c8792c4a61" class="cell" data-execution_count="25">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1">path_npbytes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/tmp/embeddings-npbytes"</span></span>
<span id="cb33-2">Path(path_npbytes).unlink() <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># start fresh</span></span></code></pre></div>
</div>
<div id="5c2f80a1-f9d4-4b49-b8cb-282c25af3274" class="cell" data-execution_count="26">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">dump_vectors_as_npbytes_blob(data, path_npbytes)</span></code></pre></div>
</div>
<div id="b3951b1e-2e20-47f0-9fdf-04dbb04bdb49" class="cell" data-execution_count="27">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k,v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> load_and_deserialize(path_npbytes, ids[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>], deserialize_npbytes).items():</span>
<span id="cb35-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(k,v[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>])</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>id_0 [0.93501425 0.70911416 0.54255025 0.84465434 0.92316   ]
id_1 [0.73054276 0.69741267 0.71045242 0.41007697 0.27032626]</code></pre>
</div>
</div>
<div id="e1d34006-1be7-4835-9c4b-ac5afaab942a" class="cell" data-execution_count="28">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb37-2"></span>
<span id="cb37-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_and_deserialize(path_npbytes, ids, deserialize_npbytes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>19.1 ms ± 1.3 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>That’s roughly 1.7 times faster than the pickle version – for free!</p>
<p>Let’s recap with a side-by-side comparison with a bit larger list of ids to query:</p>
<div id="52f5ce8d-3275-4842-9c4b-e8502a431fcb" class="cell" data-execution_count="29">
<div class="sourceCode cell-code" id="cb39" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb39-1">ids <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"id_</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>i<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>)]</span></code></pre></div>
</div>
<div id="941cdf90-2266-4edf-bc1f-3b07985413db" class="cell" data-execution_count="30">
<div class="sourceCode cell-code" id="cb40" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb40-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb40-2"></span>
<span id="cb40-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_and_deserialize(path_json, ids, deserialize_json)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>729 ms ± 7.49 ms per loop (mean ± std. dev. of 7 runs, 1 loop each)</code></pre>
</div>
</div>
<div id="de7bd316-741e-4589-9a6e-db8ff2aea787" class="cell" data-execution_count="31">
<div class="sourceCode cell-code" id="cb42" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb42-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb42-2"></span>
<span id="cb42-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_and_deserialize(path_pickle, ids, deserialize_pickle)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>67.7 ms ± 2.58 ms per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<div id="e63df43c-0cda-4022-972b-07ecb570beb6" class="cell" data-execution_count="32">
<div class="sourceCode cell-code" id="cb44" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb44-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>timeit</span>
<span id="cb44-2"></span>
<span id="cb44-3">_ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_and_deserialize(path_npbytes, ids, deserialize_npbytes)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>37.1 ms ± 319 µs per loop (mean ± std. dev. of 7 runs, 10 loops each)</code></pre>
</div>
</div>
<p>Sometimes 40, 70 or even 500ms are not important. But sometimes they are (and can cost significant money). For example, in the context of high-traffic, real-time recommender systems, pushing down the response time by 20/30 ms (for free!) is definitely not a bad thing to have.</p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>numpy</category>
  <category>sqlite</category>
  <guid>https://fabridamicelli.github.io/posts/np-array-tobytes.html</guid>
  <pubDate>Sun, 23 Jun 2024 00:00:00 GMT</pubDate>
</item>
<item>
  <title>PyTorch DataLoader: Understand and implement a custom collate function</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/pytorch-dataloader-collate.html</link>
  <description><![CDATA[ 




<p>This post contains the code behind this video explanation:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/JDy58DtZC_g" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<div id="08b15ba3-0b21-428e-8043-0b0a7f62d2cd" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> torch.nn.functional <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> F</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.utils.data <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> DataLoader, Dataset</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch.nn.utils.rnn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pad_sequence</span></code></pre></div>
</details>
</div>
<p>Imagine a supervised learning scenario of a classification task with sequential data as features and a binary target.</p>
<p>Let’s simulate a toy dataset and take a look at it:</p>
<div id="6e43cd54-3873-42e2-beb1-25a5725c1e7e" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomDataset(torch.utils.data.Dataset):</span>
<span id="cb2-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>):</span>
<span id="cb2-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb2-4">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)),</span>
<span id="cb2-5">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)),</span>
<span id="cb2-6">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>)),</span>
<span id="cb2-7">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)),</span>
<span id="cb2-8">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)),</span>
<span id="cb2-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)),</span>
<span id="cb2-10">        ]</span>
<span id="cb2-11">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb2-12">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ys)</span>
<span id="cb2-13">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb2-14">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs)</span>
<span id="cb2-15">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb2-16">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb2-17">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs[idx],</span>
<span id="cb2-18">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ys[idx],</span>
<span id="cb2-19">        }</span></code></pre></div>
</details>
</div>
<div id="30b90c75-4b95-4ef4-9548-22ccf116da07" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset()</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dset:</span>
<span id="cb3-4">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'x': [11, 12], 'y': 0}
{'x': [13, 14, 15], 'y': 0}
{'x': [16, 17, 18, 19, 20], 'y': 0}
{'x': [21, 22, 23], 'y': 1}
{'x': [22, 23, 24], 'y': 1}
{'x': [25, 26, 27, 28, 29], 'y': 1}</code></pre>
</div>
</div>
<div id="63eb9b5c-2f33-4890-bcaf-f15f0062ba66" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">dloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</div>
<div id="5470be73-2287-48db-8261-751a058a9e5c" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dloader:</span>
<span id="cb6-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(batch)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">RuntimeError</span>                              Traceback (most recent call last)
Cell <span class="ansi-green-fg">In[6], line 1</span>
<span class="ansi-green-fg">----&gt; 1</span> <span style="font-weight:bold;color:rgb(0,135,0)">for</span> batch <span style="font-weight:bold;color:rgb(175,0,255)">in</span> dloader:
<span class="ansi-green-fg ansi-bold">      2</span>     <span style="color:rgb(0,135,0)">print</span>(batch)

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/dataloader.py:628</span>, in <span class="ansi-cyan-fg">_BaseDataLoaderIter.__next__</span><span class="ansi-blue-fg">(self)</span>
<span class="ansi-green-fg ansi-bold">    625</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_sampler_iter <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span>:
<span class="ansi-green-fg ansi-bold">    626</span>     <span style="font-style:italic;color:rgb(95,135,135)"># TODO(https://github.com/pytorch/pytorch/issues/76750)</span>
<span class="ansi-green-fg ansi-bold">    627</span>     <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_reset()  <span style="font-style:italic;color:rgb(95,135,135)"># type: ignore[call-arg]</span>
<span class="ansi-green-fg">--&gt; 628</span> data <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)" class="ansi-yellow-bg">self</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">_next_data</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">)</span>
<span class="ansi-green-fg ansi-bold">    629</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_num_yielded <span style="color:rgb(98,98,98)">+</span><span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(98,98,98)">1</span>
<span class="ansi-green-fg ansi-bold">    630</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_dataset_kind <span style="color:rgb(98,98,98)">==</span> _DatasetKind<span style="color:rgb(98,98,98)">.</span>Iterable <span style="font-weight:bold;color:rgb(175,0,255)">and</span> \
<span class="ansi-green-fg ansi-bold">    631</span>         <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_IterableDataset_len_called <span style="font-weight:bold;color:rgb(175,0,255)">is</span> <span style="font-weight:bold;color:rgb(175,0,255)">not</span> <span style="font-weight:bold;color:rgb(0,135,0)">None</span> <span style="font-weight:bold;color:rgb(175,0,255)">and</span> \
<span class="ansi-green-fg ansi-bold">    632</span>         <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_num_yielded <span style="color:rgb(98,98,98)">&gt;</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_IterableDataset_len_called:

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/dataloader.py:671</span>, in <span class="ansi-cyan-fg">_SingleProcessDataLoaderIter._next_data</span><span class="ansi-blue-fg">(self)</span>
<span class="ansi-green-fg ansi-bold">    669</span> <span style="font-weight:bold;color:rgb(0,135,0)">def</span> <span style="color:rgb(0,0,255)">_next_data</span>(<span style="color:rgb(0,135,0)">self</span>):
<span class="ansi-green-fg ansi-bold">    670</span>     index <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_next_index()  <span style="font-style:italic;color:rgb(95,135,135)"># may raise StopIteration</span>
<span class="ansi-green-fg">--&gt; 671</span>     data <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)" class="ansi-yellow-bg">self</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">_dataset_fetcher</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">fetch</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">index</span><span class="ansi-yellow-bg">)</span>  <span style="font-style:italic;color:rgb(95,135,135)"># may raise StopIteration</span>
<span class="ansi-green-fg ansi-bold">    672</span>     <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_pin_memory:
<span class="ansi-green-fg ansi-bold">    673</span>         data <span style="color:rgb(98,98,98)">=</span> _utils<span style="color:rgb(98,98,98)">.</span>pin_memory<span style="color:rgb(98,98,98)">.</span>pin_memory(data, <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>_pin_memory_device)

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/_utils/fetch.py:61</span>, in <span class="ansi-cyan-fg">_MapDatasetFetcher.fetch</span><span class="ansi-blue-fg">(self, possibly_batched_index)</span>
<span class="ansi-green-fg ansi-bold">     59</span> <span style="font-weight:bold;color:rgb(0,135,0)">else</span>:
<span class="ansi-green-fg ansi-bold">     60</span>     data <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">self</span><span style="color:rgb(98,98,98)">.</span>dataset[possibly_batched_index]
<span class="ansi-green-fg">---&gt; 61</span> <span style="font-weight:bold;color:rgb(0,135,0)">return</span> <span style="color:rgb(0,135,0)" class="ansi-yellow-bg">self</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">.</span><span class="ansi-yellow-bg">collate_fn</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">data</span><span class="ansi-yellow-bg">)</span>

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py:265</span>, in <span class="ansi-cyan-fg">default_collate</span><span class="ansi-blue-fg">(batch)</span>
<span class="ansi-green-fg ansi-bold">    204</span> <span style="font-weight:bold;color:rgb(0,135,0)">def</span> <span style="color:rgb(0,0,255)">default_collate</span>(batch):
<span class="ansi-green-fg ansi-bold">    205</span> <span style="color:rgb(188,188,188)">    </span><span style="color:rgb(175,0,0)">r</span><span style="font-style:italic;color:rgb(175,0,0)">"""</span>
<span class="ansi-green-fg ansi-bold">    206</span> <span style="font-style:italic;color:rgb(175,0,0)">        Function that takes in a batch of data and puts the elements within the batch</span>
<span class="ansi-green-fg ansi-bold">    207</span> <span style="font-style:italic;color:rgb(175,0,0)">        into a tensor with an additional outer dimension - batch size. The exact output type can be</span>
<span class="ansi-green-fg">   (...)</span>
<span class="ansi-green-fg ansi-bold">    263</span> <span style="font-style:italic;color:rgb(175,0,0)">            &gt;&gt;&gt; default_collate(batch)  # Handle `CustomType` automatically</span>
<span class="ansi-green-fg ansi-bold">    264</span> <span style="font-style:italic;color:rgb(175,0,0)">    """</span>
<span class="ansi-green-fg">--&gt; 265</span>     <span style="font-weight:bold;color:rgb(0,135,0)">return</span> <span class="ansi-yellow-bg">collate</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">batch</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg"> </span><span class="ansi-yellow-bg">collate_fn_map</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">=</span><span class="ansi-yellow-bg">default_collate_fn_map</span><span class="ansi-yellow-bg">)</span>

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py:128</span>, in <span class="ansi-cyan-fg">collate</span><span class="ansi-blue-fg">(batch, collate_fn_map)</span>
<span class="ansi-green-fg ansi-bold">    126</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">isinstance</span>(elem, collections<span style="color:rgb(98,98,98)">.</span>abc<span style="color:rgb(98,98,98)">.</span>Mapping):
<span class="ansi-green-fg ansi-bold">    127</span>     <span style="font-weight:bold;color:rgb(0,135,0)">try</span>:
<span class="ansi-green-fg">--&gt; 128</span>         <span style="font-weight:bold;color:rgb(0,135,0)">return</span> elem_type({key: collate([d[key] <span style="font-weight:bold;color:rgb(0,135,0)">for</span> d <span style="font-weight:bold;color:rgb(175,0,255)">in</span> batch], collate_fn_map<span style="color:rgb(98,98,98)">=</span>collate_fn_map) <span style="font-weight:bold;color:rgb(0,135,0)">for</span> key <span style="font-weight:bold;color:rgb(175,0,255)">in</span> elem})
<span class="ansi-green-fg ansi-bold">    129</span>     <span style="font-weight:bold;color:rgb(0,135,0)">except</span> <span style="font-weight:bold;color:rgb(215,95,95)">TypeError</span>:
<span class="ansi-green-fg ansi-bold">    130</span>         <span style="font-style:italic;color:rgb(95,135,135)"># The mapping type may not support `__init__(iterable)`.</span>
<span class="ansi-green-fg ansi-bold">    131</span>         <span style="font-weight:bold;color:rgb(0,135,0)">return</span> {key: collate([d[key] <span style="font-weight:bold;color:rgb(0,135,0)">for</span> d <span style="font-weight:bold;color:rgb(175,0,255)">in</span> batch], collate_fn_map<span style="color:rgb(98,98,98)">=</span>collate_fn_map) <span style="font-weight:bold;color:rgb(0,135,0)">for</span> key <span style="font-weight:bold;color:rgb(175,0,255)">in</span> elem}

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py:128</span>, in <span class="ansi-cyan-fg">&lt;dictcomp&gt;</span><span class="ansi-blue-fg">(.0)</span>
<span class="ansi-green-fg ansi-bold">    126</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">isinstance</span>(elem, collections<span style="color:rgb(98,98,98)">.</span>abc<span style="color:rgb(98,98,98)">.</span>Mapping):
<span class="ansi-green-fg ansi-bold">    127</span>     <span style="font-weight:bold;color:rgb(0,135,0)">try</span>:
<span class="ansi-green-fg">--&gt; 128</span>         <span style="font-weight:bold;color:rgb(0,135,0)">return</span> elem_type({key: <span class="ansi-yellow-bg">collate</span><span class="ansi-yellow-bg">(</span><span class="ansi-yellow-bg">[</span><span class="ansi-yellow-bg">d</span><span class="ansi-yellow-bg">[</span><span class="ansi-yellow-bg">key</span><span class="ansi-yellow-bg">]</span><span class="ansi-yellow-bg"> </span><span style="font-weight:bold;color:rgb(0,135,0)" class="ansi-yellow-bg">for</span><span class="ansi-yellow-bg"> </span><span class="ansi-yellow-bg">d</span><span class="ansi-yellow-bg"> </span><span style="font-weight:bold;color:rgb(175,0,255)" class="ansi-yellow-bg">in</span><span class="ansi-yellow-bg"> </span><span class="ansi-yellow-bg">batch</span><span class="ansi-yellow-bg">]</span><span class="ansi-yellow-bg">,</span><span class="ansi-yellow-bg"> </span><span class="ansi-yellow-bg">collate_fn_map</span><span style="color:rgb(98,98,98)" class="ansi-yellow-bg">=</span><span class="ansi-yellow-bg">collate_fn_map</span><span class="ansi-yellow-bg">)</span> <span style="font-weight:bold;color:rgb(0,135,0)">for</span> key <span style="font-weight:bold;color:rgb(175,0,255)">in</span> elem})
<span class="ansi-green-fg ansi-bold">    129</span>     <span style="font-weight:bold;color:rgb(0,135,0)">except</span> <span style="font-weight:bold;color:rgb(215,95,95)">TypeError</span>:
<span class="ansi-green-fg ansi-bold">    130</span>         <span style="font-style:italic;color:rgb(95,135,135)"># The mapping type may not support `__init__(iterable)`.</span>
<span class="ansi-green-fg ansi-bold">    131</span>         <span style="font-weight:bold;color:rgb(0,135,0)">return</span> {key: collate([d[key] <span style="font-weight:bold;color:rgb(0,135,0)">for</span> d <span style="font-weight:bold;color:rgb(175,0,255)">in</span> batch], collate_fn_map<span style="color:rgb(98,98,98)">=</span>collate_fn_map) <span style="font-weight:bold;color:rgb(0,135,0)">for</span> key <span style="font-weight:bold;color:rgb(175,0,255)">in</span> elem}

File <span class="ansi-green-fg">/home/fabrizio/miniconda3/envs/olaf-training-py39/lib/python3.9/site-packages/torch/utils/data/_utils/collate.py:139</span>, in <span class="ansi-cyan-fg">collate</span><span class="ansi-blue-fg">(batch, collate_fn_map)</span>
<span class="ansi-green-fg ansi-bold">    137</span> elem_size <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">len</span>(<span style="color:rgb(0,135,0)">next</span>(it))
<span class="ansi-green-fg ansi-bold">    138</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="font-weight:bold;color:rgb(175,0,255)">not</span> <span style="color:rgb(0,135,0)">all</span>(<span style="color:rgb(0,135,0)">len</span>(elem) <span style="color:rgb(98,98,98)">==</span> elem_size <span style="font-weight:bold;color:rgb(0,135,0)">for</span> elem <span style="font-weight:bold;color:rgb(175,0,255)">in</span> it):
<span class="ansi-green-fg">--&gt; 139</span>     <span style="font-weight:bold;color:rgb(0,135,0)">raise</span> <span style="font-weight:bold;color:rgb(215,95,95)">RuntimeError</span>(<span style="color:rgb(175,0,0)">'</span><span style="color:rgb(175,0,0)">each element in list of batch should be of equal size</span><span style="color:rgb(175,0,0)">'</span>)
<span class="ansi-green-fg ansi-bold">    140</span> transposed <span style="color:rgb(98,98,98)">=</span> <span style="color:rgb(0,135,0)">list</span>(<span style="color:rgb(0,135,0)">zip</span>(<span style="color:rgb(98,98,98)">*</span>batch))  <span style="font-style:italic;color:rgb(95,135,135)"># It may be accessed twice, so we use a list.</span>
<span class="ansi-green-fg ansi-bold">    142</span> <span style="font-weight:bold;color:rgb(0,135,0)">if</span> <span style="color:rgb(0,135,0)">isinstance</span>(elem, <span style="color:rgb(0,135,0)">tuple</span>):

<span class="ansi-red-fg">RuntimeError</span>: each element in list of batch should be of equal size</pre>
</div>
</div>
</div>
<section id="a-first-solution-attempt" class="level2">
<h2 class="anchored" data-anchor-id="a-first-solution-attempt">A first solution attempt</h2>
<p>We can refactor our dataset and make it generate items with <code>x</code> sequences that all have the same length (a parameter <code>max_len</code> that we define beforehand).</p>
<div id="7e485493-7228-4227-bb8d-99f5889c1725" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">class</span> CustomDatasetFixLen(torch.utils.data.Dataset):</span>
<span id="cb7-2">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__init__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb7-3">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_len</span>
<span id="cb7-4">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb7-5">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">11</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>)),</span>
<span id="cb7-6">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">13</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>)),</span>
<span id="cb7-7">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">16</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>)),</span>
<span id="cb7-8">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">21</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">24</span>)),</span>
<span id="cb7-9">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">22</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>)),</span>
<span id="cb7-10">            <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30</span>)),</span>
<span id="cb7-11">        ]</span>
<span id="cb7-12">        <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ys <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>]</span>
<span id="cb7-13">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">assert</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ys)</span>
<span id="cb7-14">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__len__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>): </span>
<span id="cb7-15">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs)</span>
<span id="cb7-16">    <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__getitem__</span>(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>, idx):</span>
<span id="cb7-17">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.xs[idx]</span>
<span id="cb7-18">        pad_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(x)</span>
<span id="cb7-19">        x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pad_len</span>
<span id="cb7-20">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb7-21">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: np.array(x),</span>
<span id="cb7-22">            <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">self</span>.ys[idx],</span>
<span id="cb7-23">        }</span></code></pre></div>
</div>
<div id="5f6f879d-522d-46e7-b39c-1b003d5b2805" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDatasetFixLen(max_len<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="6976dfd1-db0b-481e-9f39-690158018648" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dset:</span>
<span id="cb9-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(item)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'x': array([11, 12,  0,  0,  0,  0,  0,  0,  0,  0]), 'y': 0}
{'x': array([13, 14, 15,  0,  0,  0,  0,  0,  0,  0]), 'y': 0}
{'x': array([16, 17, 18, 19, 20,  0,  0,  0,  0,  0]), 'y': 0}
{'x': array([21, 22, 23,  0,  0,  0,  0,  0,  0,  0]), 'y': 1}
{'x': array([22, 23, 24,  0,  0,  0,  0,  0,  0,  0]), 'y': 1}
{'x': array([25, 26, 27, 28, 29,  0,  0,  0,  0,  0]), 'y': 1}</code></pre>
</div>
</div>
<p>That works but is wasteful because we will be padding to <code>max_len</code> = 10, even when we only need to pad to length 3 (for example, if the batch is formed by the first two items). That could limit the batch size we work with slowing down the training or even lead to unnecessary computations during the forward pass if we just pass our batches without masking. So, ideally, we would like to pad only as much as we need <em>on each batch</em>. In other words, we want to dynamically (per batch basis) adapt the padding.</p>
</section>
<section id="there-must-be-a-better-way" class="level2">
<h2 class="anchored" data-anchor-id="there-must-be-a-better-way">There must be a better way</h2>
<p>Let’s implement our own collate function, i.e.&nbsp;the logic to put items together, that will allow us to the padding on a per batch basis (thus we call it <code>dynamic_length_collate</code>)</p>
<div id="1f22a8c3-b4be-43cb-9c9d-a84d180302fe" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> dynamic_length_collate(batch):</span>
<span id="cb11-2">    max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">max</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>]) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch)</span>
<span id="cb11-3">    batch_x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb11-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch:</span>
<span id="cb11-5">        pad_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> max_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>])</span>
<span id="cb11-6">        batch_x.append(item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> [<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>pad_len)</span>
<span id="cb11-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {</span>
<span id="cb11-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>: tensor(batch_x).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(torch.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span>),</span>
<span id="cb11-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>: tensor([item[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"y"</span>] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> item <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> batch])</span>
<span id="cb11-10">    }</span></code></pre></div>
</div>
<div id="8f188d2c-c18b-431e-b360-c21eda52286d" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">dset <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CustomDataset()  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Use our original dataset, without fix max_len</span></span>
<span id="cb12-2">dloader <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> DataLoader(dset, batch_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, shuffle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb12-3">                     collate_fn<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>dynamic_length_collate)</span></code></pre></div>
</div>
<div id="1c57da7d-76dd-41cd-b14f-ee6a9c58b94b" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dloader:</span>
<span id="cb13-2">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(batch)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>{'x': tensor([[11., 12.,  0.],
        [13., 14., 15.]]), 'y': tensor([0, 0])}
{'x': tensor([[16., 17., 18., 19., 20.],
        [21., 22., 23.,  0.,  0.]]), 'y': tensor([0, 1])}
{'x': tensor([[22., 23., 24.,  0.,  0.],
        [25., 26., 27., 28., 29.]]), 'y': tensor([1, 1])}</code></pre>
</div>
</div>
<p>That works!</p>
<p>For the sake of completeness, let’s use our dataloader with the custom collate function and actually feed the data into a (toy) neural network.</p>
<div id="f1b104a5-a16d-48a5-9807-4acc4d4ad95a" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># A very toy example of a neural network</span></span>
<span id="cb15-2">model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> torch.nn.LSTM(input_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, hidden_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, batch_first<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb15-3"></span>
<span id="cb15-4"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> batch <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dloader:</span>
<span id="cb15-5">    bs, seq_len <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>].shape</span>
<span id="cb15-6">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model(batch[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"x"</span>].reshape(bs, seq_len, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>))</span>
<span id="cb15-7">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(pred)</span>
<span id="cb15-8">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>(tensor([[[ 9.4607e-04,  4.0929e-03],
         [ 5.0468e-04,  5.7644e-03],
         [-1.5826e-01,  1.9474e-02]],

        [[ 2.6432e-04,  2.6775e-03],
         [ 1.3929e-04,  3.5764e-03],
         [ 7.2860e-05,  3.3866e-03]]], grad_fn=&lt;TransposeBackward0&gt;), (tensor([[[-1.5826e-01,  1.9474e-02],
         [ 7.2860e-05,  3.3866e-03]]], grad_fn=&lt;StackBackward0&gt;), tensor([[[-0.2420,  0.0843],
         [ 0.0071,  1.2391]]], grad_fn=&lt;StackBackward0&gt;)))</code></pre>
</div>
</div>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>

 ]]></description>
  <category>pytorch</category>
  <category>python</category>
  <category>data</category>
  <category>neural-nets</category>
  <guid>https://fabridamicelli.github.io/posts/pytorch-dataloader-collate.html</guid>
  <pubDate>Wed, 13 Sep 2023 00:00:00 GMT</pubDate>
</item>
<item>
  <title>seaborn and tensors: A match not quite made in heaven</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/seaborn-tensors.html</link>
  <description><![CDATA[ 




<p><a href="https://seaborn.pydata.org/">seaborn</a> makes our life easy when it comes to slicing and plotting data in Python.<br>
That awesome buffet of well balanced aesthetic and practical functionalities of its ergonomic API comes with a few caveats to consider though.<br>
Here’s one of them when trying to plot data including PyTorch tensors.</p>
<div id="2400731c-24ff-4864-8d2d-283d8c3df772" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> torch <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tensor</span>
<span id="cb1-5">sns.set_context(context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"talk"</span>)</span></code></pre></div>
</details>
</div>
<p>Let’s create 2 simple <code>numpy</code> arrays simulating the values of two variables, <code>x</code> and <code>y</code>.</p>
<div id="b694a254-6f5e-4e4d-a93d-9b7a60bedaf7" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-2">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> np.random.normal(scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.7</span>, size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">round</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span>
<span id="cb2-3">x[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], y[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(array([-1.41,  3.97,  3.2 ,  4.63,  2.99]),
 array([-0.58,  1.07, -0.13,  0.79,  3.84]))</code></pre>
</div>
</div>
<p>We can plot them using seaborn scatterplot:</p>
<div id="ec82b2b4-6d9c-494d-ae8a-e2794444083b" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2022-08-04-seaborn-tensors_files/figure-html/cell-4-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can achieve the same using lists:</p>
<div id="e5102b41-3886-4359-a690-9fedbac55c1e" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">x_li <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> x.tolist()</span>
<span id="cb5-2">y_li <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> y.tolist()</span>
<span id="cb5-3">x_li[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], y_li[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>([3.93, 1.6400000000000001, 2.91, 2.75, 0.3900000000000001],
 [-1.08, 0.91, 4.970000000000001, 3.64, 8.129999999999999])</code></pre>
</div>
</div>
<p>Again, we can plot them using <code>seaborn</code> scatterplot:</p>
<div id="ef122021-b871-4786-b3b1-a08de820208c" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_li, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_li)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2022-08-04-seaborn-tensors_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Observe that the lists are made up of python <code>float</code>s while the <code>numpy</code> arrays contain <code>numpy.float64</code>:</p>
<div id="233e6ca7-08fa-4ed4-bd00-b797fba99894" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(x_li[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>(numpy.float64, float)</code></pre>
</div>
</div>
<p>So far so good.</p>
<p>Now what happens if the individual elements are pytorch zero-dimensional tensors (i.e.&nbsp;scalars) like these:</p>
<div id="bda084e6-940c-49f0-acfe-346256c52629" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1">x_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> x] </span>
<span id="cb10-2">y_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [tensor(o) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> o <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> y] </span>
<span id="cb10-3"></span>
<span id="cb10-4">x_pt[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>], y_pt[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>([tensor(3.9300, dtype=torch.float64),
  tensor(1.6400, dtype=torch.float64),
  tensor(2.9100, dtype=torch.float64),
  tensor(2.7500, dtype=torch.float64),
  tensor(0.3900, dtype=torch.float64)],
 [tensor(-1.0800, dtype=torch.float64),
  tensor(0.9100, dtype=torch.float64),
  tensor(4.9700, dtype=torch.float64),
  tensor(3.6400, dtype=torch.float64),
  tensor(8.1300, dtype=torch.float64)])</code></pre>
</div>
</div>
<p>At first glance it looks like it should be all kind of the same. Indeed some comparisons still work the way we (I?) expect. For example, the element-wise equality:</p>
<div id="2df87a71-818d-479d-895f-4312bfc3a074" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x_li</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])</code></pre>
</div>
</div>
<div id="8f61c425-a3a8-4e04-b901-33f9165b8178" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x_pt</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])</code></pre>
</div>
</div>
<div id="3c5ccbe7-2a3d-45c4-a9c7-e50334ea4342" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">(x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x_pt).<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">all</span>()</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>True</code></pre>
</div>
</div>
<div id="2c3ccf57-4d51-490d-8780-14fb5650665f" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">x_pt <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True,  True,  True,  True,  True,  True,  True,  True,
        True,  True])</code></pre>
</div>
</div>
<p>This happens thanks to the fact that numpy under the hood first casts the objects and then compares them.<br>
When comparing the python list directly to the tensor we have this:</p>
<div id="fded3268-ec97-45de-ae8a-c30a70ec709a" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">x_li <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> x_pt</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>True</code></pre>
</div>
</div>
<p>That is not quite what I expect (i.e.&nbsp;element-wise comparison), but it is still aligned with our believe that these array-like structures (list, array, tensor) are made of equivalent scalar elements.</p>
<p>So let’s plot the tensors, like we did with the lists and the arrays:</p>
<div id="8e605532-189f-4595-9528-79bf4c2ac6f5" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_pt, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_pt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2022-08-04-seaborn-tensors_files/figure-html/cell-14-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Ups, that doesn’t look good – the y-axis is flipped!</p>
<p>After going a bit down the rabbit hole of <code>seaborn</code> and <code>pandas</code> error traces, we see that under the hood <code>seaborn</code> infers the data type of the values and –surprise!– pytorch tensors seem to be interpreted as categorical.<br>
That can be more explicitely seen if we try to plot the data with the <code>pointplot</code> function instead:</p>
<div id="3c7e096e-27a4-4a25-83db-e9653b07addf" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">sns.pointplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_pt, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_pt)<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)
<span class="ansi-green-fg">/tmp/ipykernel_418681/3817459137.py</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>sns<span class="ansi-blue-fg">.</span>pointplot<span class="ansi-blue-fg">(</span>x<span class="ansi-blue-fg">=</span>x_pt<span class="ansi-blue-fg">,</span> y<span class="ansi-blue-fg">=</span>y_pt<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">;</span>

<span class="ansi-green-fg">~/miniconda3/envs/myenv39/lib/python3.9/site-packages/seaborn/_decorators.py</span> in <span class="ansi-cyan-fg">inner_f</span><span class="ansi-blue-fg">(*args, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">     44</span>             )
<span class="ansi-green-fg ansi-bold">     45</span>         kwargs<span class="ansi-blue-fg">.</span>update<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">{</span>k<span class="ansi-blue-fg">:</span> arg <span class="ansi-green-fg">for</span> k<span class="ansi-blue-fg">,</span> arg <span class="ansi-green-fg">in</span> zip<span class="ansi-blue-fg">(</span>sig<span class="ansi-blue-fg">.</span>parameters<span class="ansi-blue-fg">,</span> args<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">}</span><span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg">---&gt; 46</span><span class="ansi-red-fg">         </span><span class="ansi-green-fg">return</span> f<span class="ansi-blue-fg">(</span><span class="ansi-blue-fg">**</span>kwargs<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">     47</span>     <span class="ansi-green-fg">return</span> inner_f
<span class="ansi-green-fg ansi-bold">     48</span> 

<span class="ansi-green-fg">~/miniconda3/envs/myenv39/lib/python3.9/site-packages/seaborn/categorical.py</span> in <span class="ansi-cyan-fg">pointplot</span><span class="ansi-blue-fg">(x, y, hue, data, order, hue_order, estimator, ci, n_boot, units, seed, markers, linestyles, dodge, join, scale, orient, color, palette, errwidth, capsize, ax, **kwargs)</span>
<span class="ansi-green-fg ansi-bold">   3373</span> ):
<span class="ansi-green-fg ansi-bold">   3374</span> 
<span class="ansi-green-fg">-&gt; 3375</span><span class="ansi-red-fg">     plotter = _PointPlotter(x, y, hue, data, order, hue_order,
</span><span class="ansi-green-fg ansi-bold">   3376</span>                             estimator<span class="ansi-blue-fg">,</span> ci<span class="ansi-blue-fg">,</span> n_boot<span class="ansi-blue-fg">,</span> units<span class="ansi-blue-fg">,</span> seed<span class="ansi-blue-fg">,</span>
<span class="ansi-green-fg ansi-bold">   3377</span>                             markers<span class="ansi-blue-fg">,</span> linestyles<span class="ansi-blue-fg">,</span> dodge<span class="ansi-blue-fg">,</span> join<span class="ansi-blue-fg">,</span> scale<span class="ansi-blue-fg">,</span>

<span class="ansi-green-fg">~/miniconda3/envs/myenv39/lib/python3.9/site-packages/seaborn/categorical.py</span> in <span class="ansi-cyan-fg">__init__</span><span class="ansi-blue-fg">(self, x, y, hue, data, order, hue_order, estimator, ci, n_boot, units, seed, markers, linestyles, dodge, join, scale, orient, color, palette, errwidth, capsize)</span>
<span class="ansi-green-fg ansi-bold">   1653</span>                  orient, color, palette, errwidth=None, capsize=None):
<span class="ansi-green-fg ansi-bold">   1654</span>         <span class="ansi-blue-fg">"""Initialize the plotter."""</span>
<span class="ansi-green-fg">-&gt; 1655</span><span class="ansi-red-fg">         self.establish_variables(x, y, hue, data, orient,
</span><span class="ansi-green-fg ansi-bold">   1656</span>                                  order, hue_order, units)
<span class="ansi-green-fg ansi-bold">   1657</span>         self<span class="ansi-blue-fg">.</span>establish_colors<span class="ansi-blue-fg">(</span>color<span class="ansi-blue-fg">,</span> palette<span class="ansi-blue-fg">,</span> <span class="ansi-cyan-fg">1</span><span class="ansi-blue-fg">)</span>

<span class="ansi-green-fg">~/miniconda3/envs/myenv39/lib/python3.9/site-packages/seaborn/categorical.py</span> in <span class="ansi-cyan-fg">establish_variables</span><span class="ansi-blue-fg">(self, x, y, hue, data, orient, order, hue_order, units)</span>
<span class="ansi-green-fg ansi-bold">    154</span> 
<span class="ansi-green-fg ansi-bold">    155</span>             <span class="ansi-red-fg"># Figure out the plotting orientation</span>
<span class="ansi-green-fg">--&gt; 156</span><span class="ansi-red-fg">             orient = infer_orient(
</span><span class="ansi-green-fg ansi-bold">    157</span>                 x<span class="ansi-blue-fg">,</span> y<span class="ansi-blue-fg">,</span> orient<span class="ansi-blue-fg">,</span> require_numeric<span class="ansi-blue-fg">=</span>self<span class="ansi-blue-fg">.</span>require_numeric
<span class="ansi-green-fg ansi-bold">    158</span>             )

<span class="ansi-green-fg">~/miniconda3/envs/myenv39/lib/python3.9/site-packages/seaborn/_core.py</span> in <span class="ansi-cyan-fg">infer_orient</span><span class="ansi-blue-fg">(x, y, orient, require_numeric)</span>
<span class="ansi-green-fg ansi-bold">   1350</span>     <span class="ansi-green-fg">elif</span> require_numeric <span class="ansi-green-fg">and</span> <span class="ansi-blue-fg">"numeric"</span> <span class="ansi-green-fg">not</span> <span class="ansi-green-fg">in</span> <span class="ansi-blue-fg">(</span>x_type<span class="ansi-blue-fg">,</span> y_type<span class="ansi-blue-fg">)</span><span class="ansi-blue-fg">:</span>
<span class="ansi-green-fg ansi-bold">   1351</span>         err <span class="ansi-blue-fg">=</span> <span class="ansi-blue-fg">"Neither the `x` nor `y` variable appears to be numeric."</span>
<span class="ansi-green-fg">-&gt; 1352</span><span class="ansi-red-fg">         </span><span class="ansi-green-fg">raise</span> TypeError<span class="ansi-blue-fg">(</span>err<span class="ansi-blue-fg">)</span>
<span class="ansi-green-fg ansi-bold">   1353</span> 
<span class="ansi-green-fg ansi-bold">   1354</span>     <span class="ansi-green-fg">else</span><span class="ansi-blue-fg">:</span>

<span class="ansi-red-fg">TypeError</span>: Neither the `x` nor `y` variable appears to be numeric.</pre>
</div>
</div>
</div>
<p>To go a bit deeper understanding this behaviour you can read the section <em>“Categorical plots will always be categorical”</em> of <a href="https://michaelwaskom.medium.com/three-common-seaborn-difficulties-10fdd0cc2a8b">this article</a> by seaborn’s creator Michaels Waskom himself.</p>
<section id="lets-fix-it" class="level2">
<h2 class="anchored" data-anchor-id="lets-fix-it">Let’s fix it</h2>
<p>A couple of options to fix our plots.<br>
We can flip the y-axis:</p>
<div id="2c613be2-323a-46ad-8d21-1a2cc117bc31" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">ax <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x_pt, y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_pt)</span>
<span id="cb24-2">ax.invert_yaxis()</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2022-08-04-seaborn-tensors_files/figure-html/cell-16-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can cast the data, for example to a numpy array:</p>
<div id="8bc96d72-dccb-4c6f-87b4-a46daed375d4" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array(x_pt), y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>np.array(y_pt))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2022-08-04-seaborn-tensors_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Or to a tensor:</p>
<div id="f4d4b6fa-4ab3-4159-bc62-34897bfa649a" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">sns.scatterplot(x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tensor(x_pt), y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>tensor(y_pt))<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2022-08-04-seaborn-tensors_files/figure-html/cell-18-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<section id="note" class="level4">
<h4 class="anchored" data-anchor-id="note">Note:</h4>
<div id="c8270b66-46c5-4343-a870-bfeba6fb4988" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This is the state as of today with </span></span>
<span id="cb27-2">sns.__version__</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'0.11.2'</code></pre>
</div>
</div>
<p>Maybe that changes in in the future.</p>
<p>PS: Consider starring the seaborn project on <a href="https://github.com/mwaskom/seaborn">github</a>.</p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>seaborn</category>
  <category>pytorch</category>
  <category>tensor</category>
  <category>visualization</category>
  <guid>https://fabridamicelli.github.io/posts/seaborn-tensors.html</guid>
  <pubDate>Thu, 04 Aug 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>from collections import ChainMap</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/chainmap.html</link>
  <description><![CDATA[ 




<p>The built-in collections module is a handy bag of tools to be aware of. Here we explore collections.ChainMap, an elegant solution to efficiently carry out a look up over more than one dictionary.</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/3voMK5jNC54" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<div id="59375680-2516-48b1-b50f-7907ddd5afe9" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Here's the gist of it, watch the video for more details.</span></span>
<span id="cb1-2"></span>
<span id="cb1-3">dict1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-4">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, </span>
<span id="cb1-5">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,</span>
<span id="cb1-6">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,</span>
<span id="cb1-7">}    </span>
<span id="cb1-8"></span>
<span id="cb1-9">dict2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>,</span>
<span id="cb1-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>,</span>
<span id="cb1-12">}    </span>
<span id="cb1-13"></span>
<span id="cb1-14">dict3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-15">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>,</span>
<span id="cb1-16">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"h"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">7</span>,</span>
<span id="cb1-17">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>,</span>
<span id="cb1-18">}    </span>
<span id="cb1-19"></span>
<span id="cb1-20">dicts <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> (dict1, dict3, dict2)</span>
<span id="cb1-21"></span>
<span id="cb1-22">key <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span></span></code></pre></div>
</div>
<div id="967f95dc-1183-49ab-b13f-462192724126" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dicts:</span>
<span id="cb2-2">    val <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> d.get(key)</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> val <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">not</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>:</span>
<span id="cb2-4">        <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(val)</span>
<span id="cb2-5">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">break</span></span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>10</code></pre>
</div>
</div>
<div id="d78c289b-8e09-4183-b0c1-136b9eeccf6f" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> collections <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ChainMap</span>
<span id="cb4-2"></span>
<span id="cb4-3">ChainMap(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dicts)[key]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>10</code></pre>
</div>
</div>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <category>collections</category>
  <category>ChainMap</category>
  <category>python-standard-library</category>
  <guid>https://fabridamicelli.github.io/posts/chainmap.html</guid>
  <pubDate>Sat, 29 Jan 2022 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Linear Regression: Don’t forget your bias</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/lr-add-constant.html</link>
  <description><![CDATA[ 




<section id="the-situation" class="level2">
<h2 class="anchored" data-anchor-id="the-situation">The situation</h2>
<p>This is a question on Stackoverflow:</p>
<p><a href="https://stackoverflow.com/questions/20701484/why-do-i-get-only-one-parameter-from-a-statsmodels-ols-fit">“Why do I get only one parameter from a statsmodels OLS fit?”</a><br>
As of today it has 52K views.<br>
So, if you ran into this problem, you’re not alone.</p>
<p>OLS refers to <a href="https://en.wikipedia.org/wiki/Ordinary_least_squares">Ordinary Least Squares</a>, a method to estimate the parameters of a <a href="https://en.wikipedia.org/wiki/Linear_regression">Linear Regression</a> model.</p>
<p><strong>The fix:</strong><br>
Instead of doing just</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> statsmodels.api <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sm</span>
<span id="cb1-2"></span>
<span id="cb1-3">sm.OLS(y, X)</span></code></pre></div>
<p>do:</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"></span>
<span id="cb2-2">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> sm.add_constant(X)    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># I am the fix, nice to meet you :)</span></span>
<span id="cb2-3">sm.OLS(y, X)</span></code></pre></div>
<p>All good. But <em>why</em> does that fix it?</p>
</section>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>The basic problem is that, as the <a href="https://www.statsmodels.org/stable/regression.html">documentation states</a>, the default model for which the method fits the parameters is the following:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20X%20%5Cbeta%20+%20%5Cmu%0A"></p>
<p>where <img src="https://latex.codecogs.com/png.latex?Y"> is the dependent variable, <img src="https://latex.codecogs.com/png.latex?X"> is the so called “design matrix”, ie your independent variables (predictors) packed into columns, <img src="https://latex.codecogs.com/png.latex?%5Cbeta"> the coefficients that we are figuring out with ordinary least squares and <img src="https://latex.codecogs.com/png.latex?%5Cmu"> the “noise” or “error term”, ie bag of factors that influence our variable <img src="https://latex.codecogs.com/png.latex?Y"> but we are not including in <img src="https://latex.codecogs.com/png.latex?X">.</p>
<p>What we actually might need is:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY%20=%20X%20%5Cbeta_1%20+%20%5Cbeta_0%20+%20%5Cmu%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> is a constant term, ie the “bias” in our model, also called “intercept”, as we are talking about a line equation and that is the value of <code>y</code> at which a line intecepts such axis when <code>x = 0</code>.</p>
<p>So what is the bias?<br>
Here’s an analogy: Imagine we are trying to predict beer consumption (liters per person per year) based on number of sunny days (per year). The mental model (hypothesis) being that people will spend more time outdoors on sunny days and beer would be their choice. Silly model, but bear with me. We go out and get data for the last 50 years regarding on how much beer people drank and how many sunny days per year there were, so we’d have:</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY_%7Bbeer%7D%20=%20X%20%5Cbeta_%7Bsun%7D%20+%20%5Cbeta_0%20+%20%5Cmu%0A"></p>
<p>Now, say we carry out the study in Germany and Indonesia. Then maybe (just maybe) people tend to <a href="https://ourworldindata.org/alcohol-consumption">consume more alcohol in general in one of those countries than in the other</a>, regardless of the number of sunny days. The bias in our model could capture that. In other words, we could see if the “starting point” (the <img src="https://latex.codecogs.com/png.latex?%5Cbeta_0"> term) is different for the countries, on top of what we could have the influence of our independent variable, by looking at the data separately and fit two different models (one per country):</p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY_%7Bbeer-Indonesia%7D%20=%20X%20%5Cbeta_%7Bsun%7D%20+%20%5Cbeta_%7B0-Indonesia%7D%20+%20%5Cmu%0A"></p>
<p><img src="https://latex.codecogs.com/png.latex?%0AY_%7Bbeer-Germany%7D%20=%20X%20%5Cbeta_%7Bsun%7D%20+%20%5Cbeta_%7B0-Germany%7D%20+%20%5Cmu%0A"></p>
<p>OK. That’s all I will say about linear regression here.</p>
<blockquote class="blockquote">
<p>warning: Don’t take that example too seriously. For the sake of the story I am deliberately using a <em>causal</em> narrative, which is by no means supported by a regression model based on correlations. But you got the point.</p>
</blockquote>
<p>Aside from that, let’s look at some code examples that will be more illustrative of what the bias is doing in our model.</p>
</section>
<section id="experiment-with-synthetic-data" class="level2">
<h2 class="anchored" data-anchor-id="experiment-with-synthetic-data">Experiment with synthetic data</h2>
<p>Let’s create a synthetic ground truth dataset so that we can see these models in action on a concrete example.</p>
<div id="3f662336-77b2-4815-a8b8-3eac043f15e9" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> make_regression</span>
<span id="cb3-2"></span>
<span id="cb3-3">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_regression(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">200</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50</span>, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</div>
<p>As the parameter <code>bias</code> shows, the data will have this intrinsic bias. So we know it’s there. Now we will fit a model with and another without bias and observe their behaviour.</p>
<div id="778454f8-5b98-412d-8b3a-57f5d757cdb4" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.linear_model <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> LinearRegression</span>
<span id="cb4-2"></span>
<span id="cb4-3">model_with_bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression().fit(x, y)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default: fit_intercept=True</span></span>
<span id="cb4-4">model_without_bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression(fit_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).fit(x, y)</span></code></pre></div>
</div>
<p>Let’s check how well these models fit the training data by plotting predictions coming from both of them:</p>
<div id="8ae596d2-bb21-444b-8353-e05afea362a8" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_models_fit(x, y, model_with_bias, model_without_bias):</span>
<span id="cb5-2">    plt.figure(figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>))</span>
<span id="cb5-3">    plt.plot(x, y, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'o'</span>, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.5</span>)</span>
<span id="cb5-4">    plt.plot(x, model_with_bias.predict(x),  label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model with bias"</span>)</span>
<span id="cb5-5">    plt.plot(x, model_without_bias.predict(x), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model without bias"</span>)</span>
<span id="cb5-6">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Dependent variable"</span>)</span>
<span id="cb5-7">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Independent variable"</span>)</span>
<span id="cb5-8">    plt.legend()</span></code></pre></div>
</div>
<div id="4e063336-a5d3-4c22-9185-b83344eba20c" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">plot_models_fit(x, y, model_with_bias, model_without_bias)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2021-10-16-lr_add_constant_files/figure-html/cell-6-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>As we see, the two models produce different outcomes. The one without bias “forces” the line to pass through the origin. The slope may be similar because of ordinary least squares minimizes the vertical (square) distance from the line to the data points, but that really depends on the data at hand, as we can see in the following example with different ground truth data:</p>
<div id="84ee0380-36f2-47ab-8b30-30ac677390ad" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_regression(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb7-2"></span>
<span id="cb7-3">model_with_bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression().fit(x, y)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default: fit_intercept=True</span></span>
<span id="cb7-4">model_without_bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression(fit_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).fit(x, y)</span>
<span id="cb7-5"></span>
<span id="cb7-6">plot_models_fit(x, y, model_with_bias, model_without_bias)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2021-10-16-lr_add_constant_files/figure-html/cell-7-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Finally, what if the data indeed does not have such a bias? Let’s try it:</p>
<div id="a54e5832-aab4-4a6d-9e4d-233ea0f43e8b" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">x, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> make_regression(n_samples<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, n_features<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, bias<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, noise<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">80</span>)</span>
<span id="cb8-2"></span>
<span id="cb8-3">model_with_bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression().fit(x, y)   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># default: fit_intercept=True</span></span>
<span id="cb8-4">model_without_bias <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> LinearRegression(fit_intercept<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>).fit(x, y)</span>
<span id="cb8-5"></span>
<span id="cb8-6">plot_models_fit(x, y, model_with_bias, model_without_bias)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2021-10-16-lr_add_constant_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>In general, the models indeed tend to become more similar (provided enough data points are given). But, again, the exact outcome depends on the data at hand.</p>
</section>
<section id="take-home-messages" class="level2">
<h2 class="anchored" data-anchor-id="take-home-messages">Take-home messages</h2>
<ul>
<li>Excluding the bias constrains the parameters fit such that we will only get a similarly good (or bad) model compared to the one with bias <em>if the data happens to</em> not have such a bias.</li>
<li><code>scikit-learn</code>’s<code>LinearRegression</code> model fits the intercept per default. <code>statsmodels</code> <code>OLS</code> does not.</li>
<li>Whenever in doubt in a situation like this, just try it out. Fake some data that you understand and run your own experiments.</li>
</ul>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>scikit-learn</category>
  <category>statsmodels</category>
  <category>linear-regression</category>
  <guid>https://fabridamicelli.github.io/posts/lr-add-constant.html</guid>
  <pubDate>Sat, 16 Oct 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Merging Python dictionaries: A functional take</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/merge-dicts.html</link>
  <description><![CDATA[ 




<section id="merging-dictionaries" class="level3">
<h3 class="anchored" data-anchor-id="merging-dictionaries">Merging dictionaries</h3>
<p>Say we have these two dictionaries that we would like to merge:</p>
<div id="ea55eb8e-d9bf-4bee-9679-79dde8ff3735" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}</span>
<span id="cb1-2">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>}</span></code></pre></div>
</div>
<p>A kind of cannonical way to do it would be this:</p>
<div id="4895415a-8920-4c8c-9b53-c822d6a6ab70" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">d3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb2-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [d1, d2]:</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> d.items():</span>
<span id="cb2-4">        d3[k] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> v</span>
<span id="cb2-5"></span>
<span id="cb2-6">d3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 3, 'd': 4}</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Notice that we are <em>updating</em> the items, so later appeared keys will overwrite the values under existing keys.</p>
</div>
</div>
<p>That works. But it’s arguably not so nice. Here’s an alternative:</p>
<div id="e75e362c-ec03-4eca-865e-88622a912eb3" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">d3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {k: v <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> [d1, d2] <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> k, v <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> d.items()}</span>
<span id="cb4-2"></span>
<span id="cb4-3">d3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 3, 'd': 4}</code></pre>
</div>
</div>
<p>That’s compact and kind of nice because of the dictionary comprehension. But, as Michael Kennedy puts it in <a href="https://www.youtube.com/watch?v=ZMkUoHj5GU0">this video</a>, it’s a bit of a “too clever” alternative, that might be not so easy to read.</p>
<p>What many people consider to be a “more pythonic” way is the following:</p>
<div id="901d6e6c-0165-4302-a0e3-e2e9a009c6a5" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">d3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d1, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d2}</span>
<span id="cb6-2">d3</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 3, 'd': 4}</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>This will only work from Python 3.5 on.</p>
</div>
</div>
<p>Beautiful.</p>
<p>That’s where most tutorials on merging dictionaries in Python end. Let’s go beyond that. What if we have more dictionaries to merge, say, three:</p>
<div id="604d13e4-be36-4ea1-89ed-3ee4f8c9394a" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}</span>
<span id="cb8-2">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>}</span>
<span id="cb8-3">d3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>}</span>
<span id="cb8-4"></span>
<span id="cb8-5"></span>
<span id="cb8-6">d4 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d1, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d3}</span>
<span id="cb8-7">d4</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 3, 'd': 4, 'f': 6, 'g': 9}</code></pre>
</div>
</div>
<p><em>Question:</em> And how about having 10 thousand dictionaries? Or not even knowing how many you have?</p>
<p><em>Answer:</em> Let’s get functional! :)</p>
<p>We can easily extend the logic of what we’ve been doing so far with one functional concept: <code>reduce</code> (aka “fold” in other languages).</p>
</section>
<section id="detour-what-is-reduce" class="level3">
<h3 class="anchored" data-anchor-id="detour-what-is-reduce">Detour: What is <code>reduce</code></h3>
<p>If you’re alredy familiar with this concept, jumpt to the next subsection.</p>
<p>You can check the details for yourself if you’re not yet familiar with the concept, eg <a href="https://realpython.com/python-reduce-function/">this nice Real Python’s tutorial</a>. In essence <code>reduce</code> is a higher order function that will recursively apply a combining operation to the elements of an iterable. That’s mouthful, let’s look at a couple of quick examples:</p>
<div id="d6857919-fe2b-456b-ac6c-5fbb972f1f1a" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> functools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span></span>
<span id="cb10-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> operator <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> add, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span></span></code></pre></div>
</div>
<div id="87eed11c-e458-430c-8203-680998f6b7ad" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">add??</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Signature:</span> add<span class="ansi-blue-fg">(</span>a<span class="ansi-blue-fg">,</span> b<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">/</span><span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Docstring:</span> Same as a + b.
<span class="ansi-red-fg">Type:</span>      builtin_function_or_method
</pre>
</div>
</div>
</div>
<div id="c0a13b3b-3f0c-452b-9ed3-1ecce89b9863" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>??</span></code></pre></div>
<div class="cell-output cell-output-display">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">Signature:</span> pow<span class="ansi-blue-fg">(</span>a<span class="ansi-blue-fg">,</span> b<span class="ansi-blue-fg">,</span> <span class="ansi-blue-fg">/</span><span class="ansi-blue-fg">)</span>
<span class="ansi-red-fg">Docstring:</span> Same as a ** b.
<span class="ansi-red-fg">Type:</span>      builtin_function_or_method
</pre>
</div>
</div>
</div>
<p>Both <code>add</code> and <code>pow</code> take two arguments and return one, so they “reduce” (or “fold”) the two inputs into one.</p>
<div id="cf81cb93-80ba-4490-bfec-1ca2abace839" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(add, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>,<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>10</code></pre>
</div>
</div>
<div id="dfa100e4-2fcb-44b5-8794-0d0d1c460cd1" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>10</code></pre>
</div>
</div>
<div id="079ef836-96c2-44aa-94cc-19e0448fbbb4" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">pow</span>, (<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1152921504606846976</code></pre>
</div>
</div>
<div id="86a29aff-fb55-48f7-affc-8ceebce4f662" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">((<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice the succesive (recursive) nature of the operation</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>1152921504606846976</code></pre>
</div>
</div>
</section>
<section id="back-to-dictionaries" class="level3">
<h3 class="anchored" data-anchor-id="back-to-dictionaries">Back to dictionaries</h3>
<p>Let’s apply that to dictionary merging:</p>
<div id="73c3d809-1284-4a01-8565-2ff708566798" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> merge(d1, d2):</span>
<span id="cb21-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return a new dictionary which results from merging d1 and d2"""</span></span>
<span id="cb21-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> {<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d1, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d2}</span></code></pre></div>
</div>
<p>So far nothing new. But notice that we now have an operation that <em>takes two arguments and returns one</em>, in other words a “reducing” or “folding” operation, so we can now use that!</p>
<div id="8ac37458-42f2-4d6a-b830-2b54b8eceb14" class="cell">
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">d1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"b"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>}</span>
<span id="cb22-2">d2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"a"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"d"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>}</span>
<span id="cb22-3">d3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"c"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"f"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">6</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"g"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">9</span>}</span></code></pre></div>
</div>
<div id="c7020677-7f07-4837-81ec-155ef9a3b350" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(merge, (d1, d2, d3))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 4, 'd': 4, 'f': 6, 'g': 9}</code></pre>
</div>
</div>
<p>Even some nice non-trivial properties come for free, eg it does the right thing when passing only one argument:</p>
<div id="d76ce694-337a-4963-a6ba-b4a4df81bcc8" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(merge, (d1,))   <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># notice that d1 it has to be in an iterable</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 1, 'b': 2}</code></pre>
</div>
</div>
<p>I think that is nice. But it can get nicer, because we can put all that together and by exploiting the arbitrary positional arguments (aka <code>*args</code>) we make it more general:</p>
<div id="f9daf83a-ce43-428d-8eae-8be4be643812" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> merge_dicts(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dicts):</span>
<span id="cb27-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(<span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">lambda</span> d1,d2: {<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d1, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>d2},  dicts)</span></code></pre></div>
</div>
<p>Now we can use the very same function to merge as many dictionaries as we’d like, just passing them as positional arguments:</p>
<div id="48c8a3b9-4d62-42f1-b1b7-6e17db75b719" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1">merge_dicts(d1)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 1, 'b': 2}</code></pre>
</div>
</div>
<div id="caab9d8a-706b-4a94-a908-362fe6e229ce" class="cell">
<div class="sourceCode cell-code" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">merge_dicts(d1, d2)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 3, 'd': 4}</code></pre>
</div>
</div>
<div id="2c72e5e8-ef79-4655-9b01-a3a42142cd68" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">merge_dicts(d1, d2, d3, d1)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 1, 'b': 2, 'c': 4, 'd': 4, 'f': 6, 'g': 9}</code></pre>
</div>
</div>
<p>How cool is that? :)</p>
<p>Here’s the video version of this tutorial</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/c3kewP44aks" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p><strong>Edit:</strong></p>
<p>If you are using Python &gt;= 3.9, there are a couple of better alternatives:<br>
The first, more compact:</p>
<div id="955eb682-b67a-4ba6-afb7-cb5afc3f3e7d" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> operator</span>
<span id="cb34-2"></span>
<span id="cb34-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> merge_dicts(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dicts):</span>
<span id="cb34-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">reduce</span>(operator.<span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">__or__</span>, dicts)</span></code></pre></div>
</div>
<div id="fd446c3d-03e1-4cea-b2cc-9de2bc7a090f" class="cell">
<div class="sourceCode cell-code" id="cb35" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb35-1">merge_dicts_or(d1,d2,d3)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 4, 'd': 4, 'f': 6, 'g': 9}</code></pre>
</div>
</div>
<p>The second, more readable:</p>
<div id="4a65a124-ce39-40d9-ab11-3e7162329813" class="cell">
<div class="sourceCode cell-code" id="cb37" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb37-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> merge_dicts(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>dicts):</span>
<span id="cb37-2">    ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb37-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> d <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> dicts:</span>
<span id="cb37-4">        ret <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">|=</span> d</span>
<span id="cb37-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> ret</span></code></pre></div>
</div>
<div id="27a77c45-5913-4493-997c-bb1637eab706" class="cell">
<div class="sourceCode cell-code" id="cb38" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb38-1">merge_dicts_or(d1,d2,d3)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>{'a': 2, 'b': 2, 'c': 4, 'd': 4, 'f': 6, 'g': 9}</code></pre>
</div>
</div>
<p>Both were pointed out by Anthony Sottile in this tweet - thanks!:</p>
<p></p><div id="tweet-78913"></div><script>tweet={"url":"https:\/\/twitter.com\/codewithanthony\/status\/1447598310466981888","author_name":"Anthony Sottile","author_url":"https:\/\/twitter.com\/codewithanthony","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003Eat that point might as well use `reduce(operator.__or__, dcts)` -- though I think FP tends to hurt readability over the relatively straightforward loop:\u003Cbr\u003E\u003Cbr\u003Edef combine_dicts(*dcts):\u003Cbr\u003E    ret = \u007B\u007D\u003Cbr\u003E    for dct in dcts:\u003Cbr\u003E        ret |= dct\u003Cbr\u003E    return ret\u003C\/p\u003E&mdash; Anthony Sottile (@codewithanthony) \u003Ca href=\"https:\/\/twitter.com\/codewithanthony\/status\/1447598310466981888?ref_src=twsrc%5Etfw\"\u003EOctober 11, 2021\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-78913").innerHTML = tweet["html"];</script><p></p>
<p>References:<br>
- <a href="https://docs.python.org/3/library/functools.html#functools.reduce">Python <code>functools</code> documentation</a><br>
- <a href="https://www.youtube.com/watch?v=ZMkUoHj5GU0&amp;t=272s">Michael Kennedy’s tutorial</a><br>
- <a href="https://realpython.com/python-reduce-function/">Real Python’s article on reduce</a></p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>functools</category>
  <category>functional-programming</category>
  <category>python-standard-library</category>
  <guid>https://fabridamicelli.github.io/posts/merge-dicts.html</guid>
  <pubDate>Sun, 10 Oct 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>What is starmap?</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/starmap.html</link>
  <description><![CDATA[ 




<p>Let’s look at a common pattern in Python code:</p>
<div id="665d068b-fe2b-406b-a707-21f4e228246d" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>)</span></code></pre></div>
</div>
<div id="ec2ef7e8-a2b1-4b14-a089-d94e0f1be454" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(numbers)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre>
</div>
</div>
<div id="81f1d287-49ac-41de-ba02-865da1000b18" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square(x):</span>
<span id="cb4-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span></code></pre></div>
</div>
<div id="ade8846d-38c3-4091-8385-df647cdb50f3" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb5-2"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers:</span>
<span id="cb5-3">    results.append(square(n))</span></code></pre></div>
</div>
<div id="d9001e8f-87df-4a9e-97ad-7450cbdc952c" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">results</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre>
</div>
</div>
<p>That’s fine. But Pythonistas often prefer list comprehensions like this:</p>
<div id="0c5325ad-3be3-4694-aa8e-e2b43fc6ec5f" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [square(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers]</span>
<span id="cb8-2"></span>
<span id="cb8-3">results</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre>
</div>
</div>
<p>Equivalently, we can do that with the built in <code>map</code> function:</p>
<div id="ad0180aa-73d7-4142-bbc7-d2285d842e10" class="cell">
<div class="sourceCode cell-code" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb10-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(square, numbers))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]</code></pre>
</div>
</div>
<p>Nice. But sometimes we want to do something less trivial:</p>
<div id="dc55424c-df70-499c-963f-20065b325f07" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb12-2">    n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> n<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span> <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> n</span>
<span id="cb12-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers</span>
<span id="cb12-4">]</span></code></pre></div>
</div>
<div id="1b07f3f0-f8af-4856-bb8f-d86edc5f7caa" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">results</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 2, 9, 4, 25, 6, 49, 8, 81]</code></pre>
</div>
</div>
<p>Compact and nice, but the cognitive load starts growing. Arguably not what we want. We’d rather have a little function:</p>
<div id="d777454a-5150-4f40-8f65-fc359e2421b5" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> square_if_odd(x):</span>
<span id="cb15-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> x <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>:</span>
<span id="cb15-3">        <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span></span>
<span id="cb15-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> x</span></code></pre></div>
</div>
<div id="7b996911-ddc1-4e30-b920-3e7eb783f302" class="cell">
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [square_if_odd(n) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> numbers]</span>
<span id="cb16-2"></span>
<span id="cb16-3">results</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 2, 9, 4, 25, 6, 49, 8, 81]</code></pre>
</div>
</div>
<p>Equivalently:</p>
<div id="82ee8085-e38e-47eb-bb3b-c94c352d2bf0" class="cell">
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(square_if_odd, numbers))</span>
<span id="cb18-2"></span>
<span id="cb18-3">results</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[0, 1, 2, 9, 4, 25, 6, 49, 8, 81]</code></pre>
</div>
</div>
<p>Reading a <code>for</code> loop triggers this voice inside our heads that kind of spells the operation. Sometimes that works great. But often times I find the <code>map</code> operation to reduce that cognitive load and to improve readability.</p>
<p>Let’s go one step further to see what I mean:</p>
<div id="5bc41c1c-6da9-44ef-ae09-4d08b42e5987" class="cell">
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">numbers2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb20-2">numbers3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20</span>)</span></code></pre></div>
</div>
<div id="407c9695-2e36-434b-ab8f-556eabc42854" class="cell">
<div class="sourceCode cell-code" id="cb21" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb21-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(numbers2), <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(numbers3)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>([5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [10, 11, 12, 13, 14, 15, 16, 17, 18, 19])</code></pre>
</div>
</div>
<p>Say we want to do something combining inputs like this:</p>
<div id="6fbcaf40-b523-49e1-81ec-a91bb04abce6" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> add_and_exp(a,b,c):</span>
<span id="cb23-2">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> (a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> b) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span> c</span></code></pre></div>
</div>
<div id="588d8c22-8bf8-4f96-a143-5d1018b30899" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [add_and_exp(a, b, c) <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> a, b, c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(numbers, numbers2, numbers3)]</span></code></pre></div>
</div>
<div id="ecd9c8e6-1904-444b-9191-d8d9f8cc895a" class="cell">
<div class="sourceCode cell-code" id="cb25" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb25-1">results</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[9765625,
 1977326743,
 282429536481,
 34522712143931,
 3937376385699289,
 437893890380859375,
 48661191875666868481,
 5480386857784802185939,
 630880792396715529789561,
 74615470927590710561908487]</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>Beware that <code>zip</code> will stop when the <em>shortest</em> list of numbers is exhausted.”</p>
</div>
</div>
<p>This is the equivalent using <code>map</code> that <strong>we would like</strong> to have.</p>
<div id="9247c268-1c7c-4ac0-abff-e7b77f423c64" class="cell">
<div class="sourceCode cell-code" id="cb27" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb27-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">map</span>(add_and_exp, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(numbers, numbers2, numbers3))</span></code></pre></div>
</div>
<p>Cleaner rigth? :)</p>
<p>Now, <code>map</code> is lazy so nothing will happen until we evaluate it:</p>
<div id="e4934f81-e19f-44c8-90a6-f9f4aac54d91" class="cell">
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-error">
<div class="ansi-escaped-output">
<pre><span class="ansi-red-fg">---------------------------------------------------------------------------</span>
<span class="ansi-red-fg">TypeError</span>                                 Traceback (most recent call last)
<span class="ansi-green-fg">/tmp/ipykernel_71298/3044707654.py</span> in <span class="ansi-cyan-fg">&lt;module&gt;</span>
<span class="ansi-green-fg">----&gt; 1</span><span class="ansi-red-fg"> </span>list<span class="ansi-blue-fg">(</span>results<span class="ansi-blue-fg">)</span>

<span class="ansi-red-fg">TypeError</span>: add_and_exp() missing 2 required positional arguments: 'b' and 'c'</pre>
</div>
</div>
</div>
<p>Upps!</p>
<p><code>zip</code> is giving us tuples that look like this <code>(a, b, c)</code>, where <code>a</code>, <code>b</code>, <code>c</code> come from <code>numbers</code>, <code>numbers2</code>, <code>numbers3</code>, respectively.</p>
<div id="43ed24d5-268a-451e-af77-46605e1e8baf" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(numbers, numbers2, numbers3))</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[(0, 5, 10),
 (1, 6, 11),
 (2, 7, 12),
 (3, 8, 13),
 (4, 9, 14),
 (5, 10, 15),
 (6, 11, 16),
 (7, 12, 17),
 (8, 13, 18),
 (9, 14, 19)]</code></pre>
</div>
</div>
<p>But our function takes 3 arguments. So we would like to <strong>unpack</strong> each tuple before passing it to <code>add_and_exp</code>. We <em>could</em> modify the function to handle that. But we don’t have to, because <code>starmap</code> does exactly that for us:</p>
<div id="73e0f7ae-ef25-46a0-99c5-e0a0d4cc2062" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> itertools <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> starmap</span></code></pre></div>
</div>
<div id="d3f8e578-6ba2-4b91-a7d0-d827dcb5e4fc" class="cell">
<div class="sourceCode cell-code" id="cb32" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb32-1">results <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> starmap(add_and_exp, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(numbers, numbers2, numbers3))</span></code></pre></div>
</div>
<div id="aa182697-c7c9-4637-8355-43dc9318dc19" class="cell">
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(results)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>[9765625,
 1977326743,
 282429536481,
 34522712143931,
 3937376385699289,
 437893890380859375,
 48661191875666868481,
 5480386857784802185939,
 630880792396715529789561,
 74615470927590710561908487]</code></pre>
</div>
</div>
<p>Now go out and write some beatiful functional Python :)</p>
<p>Here’s the video version of this tutorial:</p>
<div class="quarto-video ratio ratio-16x9"><iframe data-external="1" src="https://www.youtube.com/embed/wiwb5WAByFE" title="" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe></div>
<p>References: - <a href="https://docs.python.org/2/library/itertools.html#itertools.starmap">Python <code>itertools</code> documentation</a></p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <category>itertools</category>
  <category>functional-programming</category>
  <category>python-standard-library</category>
  <guid>https://fabridamicelli.github.io/posts/starmap.html</guid>
  <pubDate>Sat, 18 Sep 2021 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Achtung: Watch out, German csv readers!</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/achtung-german-csv-reader.html</link>
  <description><![CDATA[ 




<p>TL;DR: <code>pandas.read_csv</code> considers the word “null” as a NaN, which also means “zero” in German. The arguments <code>na_values</code> and <code>keep_default_na</code> offer a solution.</p>
<p>It’s Friday an you set out to build a <em>very sophisticated</em> numbers translator in several languages:</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"></span>
<span id="cb1-3">numbers <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb1-4">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanish"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cero"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uno"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"dos"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tres"</span>],</span>
<span id="cb1-5">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"English"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zero"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"one"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"two"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"three"</span>],</span>
<span id="cb1-6">   <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"German"</span>: [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"null"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"eins"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"zwei"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"drei"</span>],</span>
<span id="cb1-7">})</span>
<span id="cb1-8">numbers.index <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> numbers.index.rename(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number"</span>)</span>
<span id="cb1-9">numbers</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Spanish</th>
<th data-quarto-table-cell-role="th">English</th>
<th data-quarto-table-cell-role="th">German</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>cero</td>
<td>zero</td>
<td>null</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>uno</td>
<td>one</td>
<td>eins</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>dos</td>
<td>two</td>
<td>zwei</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>tres</td>
<td>three</td>
<td>drei</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>If you want to know how to say 3 in Spanish, you do:</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">numbers.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Spanish"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'tres'</code></pre>
</div>
</div>
<p>Nice. You save the <em>super advanced</em> translator for later use and go off for a relaxed weekend.</p>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">numbers.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numbers"</span>)</span></code></pre></div>
</div>
<p>Back to work on Monday, your German friend drops by your office and you want to proudly show what you’ve created. <br> So you load your “translator” and go like: <br> – Ask me how to say any number! <br> – OK. Let’s start easy: how do you say zero in German?</p>
<p>“That I can do”, you think and type:</p>
<div id="cell-10" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Load the awesome translator</span></span>
<span id="cb5-2">numbers_loaded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numbers"</span>, index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number"</span>)</span>
<span id="cb5-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># And get the translation</span></span>
<span id="cb5-4">numbers_loaded.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"German"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>nan</code></pre>
</div>
</div>
<p>Oh no, that’s no good! <br> You get out of the embarrassing situation saying it is actually a beta version, and, and, and. The harm is done and your friend leaves the office skeptical – to say the least.</p>
<p><strong>What’s was the problem?</strong> <br> The answer is in the docstrings of the function <code>pd.read_csv</code>. If we look carefully at which values pandas considers as NaN per default we find the following:</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb7-2"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">na_values : scalar, str, list-like, or dict, optional</span></span>
<span id="cb7-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Additional strings to recognize as NA/NaN. If dict passed, specific</span></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    per-column NA values.  By default the following values are interpreted as</span></span>
<span id="cb7-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    NaN: '', '#N/A', '#N/A N/A', '#NA', '-1.#IND', '-1.#QNAN', '-NaN', '-nan',</span></span>
<span id="cb7-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    '1.#IND', '1.#QNAN', 'N/A', 'NA', 'NULL', 'NaN', 'n/a', 'nan',</span></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    'null'.</span></span>
<span id="cb7-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span></code></pre></div>
<p>There it is: “null” is in the list!</p>
<p><strong>Solution:</strong> <br> We need to do two things: - Pass other values without “null” (and “NULL” if you’re not sure everything is lowercase). - Tell pandas not to keep the defaults (otherwise it will use both the defaults and the passed values).</p>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">na_values <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [</span>
<span id="cb8-2">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">''</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#N/A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#N/A N/A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'#NA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-1.#IND'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-1.#QNAN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-NaN'</span>, </span>
<span id="cb8-3">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'-nan'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1.#IND'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'1.#QNAN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'N/A'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NA'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'NaN'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'n/a'</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'nan'</span></span>
<span id="cb8-4">]</span>
<span id="cb8-5"></span>
<span id="cb8-6">numbers_loaded <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(</span>
<span id="cb8-7">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"numbers"</span>, </span>
<span id="cb8-8">     index_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number"</span>,</span>
<span id="cb8-9">     na_values<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>na_values, </span>
<span id="cb8-10">     keep_default_na<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span></span>
<span id="cb8-11">)</span>
<span id="cb8-12">                            </span>
<span id="cb8-13">numbers_loaded</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>


<table class="dataframe caption-top table table-sm table-striped small" data-quarto-postprocess="true" data-border="1">
<thead>
<tr class="header">
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th">Spanish</th>
<th data-quarto-table-cell-role="th">English</th>
<th data-quarto-table-cell-role="th">German</th>
</tr>
<tr class="odd">
<th data-quarto-table-cell-role="th">Number</th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
<th data-quarto-table-cell-role="th"></th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td data-quarto-table-cell-role="th">0</td>
<td>cero</td>
<td>zero</td>
<td>null</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">1</td>
<td>uno</td>
<td>one</td>
<td>eins</td>
</tr>
<tr class="odd">
<td data-quarto-table-cell-role="th">2</td>
<td>dos</td>
<td>two</td>
<td>zwei</td>
</tr>
<tr class="even">
<td data-quarto-table-cell-role="th">3</td>
<td>tres</td>
<td>three</td>
<td>drei</td>
</tr>
</tbody>
</table>

</div>
</div>
</div>
<p>Now we can ask:</p>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">numbers_loaded.loc[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"German"</span>]</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>'null'</code></pre>
</div>
</div>
<p>That will keep your German friends happy :)</p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <category>pandas</category>
  <category>text</category>
  <guid>https://fabridamicelli.github.io/posts/achtung-german-csv-reader.html</guid>
  <pubDate>Wed, 20 May 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Explicit is better than implicit</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/numpy-array-in-place.html</link>
  <description><![CDATA[ 




<p>TL; DR: Only use the form <code>array *= something</code> if you’re 100% sure you are doing the right thing, otherwise, just go for <code>array = array * something</code>.</p>
<p>Let’s see why. <br> We define two functions that to the eyes of many (including past me) do just the same.</p>
<div id="cell-3" class="cell">
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> multiply(array, scalar):</span>
<span id="cb1-4">    array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*=</span> scalar  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># &lt;-- handy short hand, right?  ;)</span></span>
<span id="cb1-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> array</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> multiply2(array, scalar):</span>
<span id="cb1-8">    array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> array <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> scalar</span>
<span id="cb1-9">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> array</span></code></pre></div>
</div>
<p>Let’s see them in action</p>
<div id="cell-5" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">a <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># dot casts to float to avoid type errors</span></span>
<span id="cb2-2">b <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">10.</span>)</span></code></pre></div>
</div>
<div id="cell-6" class="cell">
<div class="sourceCode cell-code" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</code></pre>
</div>
</div>
<div id="cell-7" class="cell">
<div class="sourceCode cell-code" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">b</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([0., 1., 2., 3., 4., 5., 6., 7., 8., 9.])</code></pre>
</div>
</div>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">multiply(a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18.])</code></pre>
</div>
</div>
<div id="cell-9" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">multiply(a, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ 0.,  4.,  8., 12., 16., 20., 24., 28., 32., 36.])</code></pre>
</div>
</div>
<p>Hey, wait! What’s going on?</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">a</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ 0.,  4.,  8., 12., 16., 20., 24., 28., 32., 36.])</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-warning callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Warning
</div>
</div>
<div class="callout-body-container callout-body">
<p>The operation modifies the array <strong>in place</strong>.</p>
</div>
</div>
<p>Let’s see what the other version of our function does.</p>
<div id="cell-14" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">multiply2(b, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18.])</code></pre>
</div>
</div>
<div id="cell-15" class="cell">
<div class="sourceCode cell-code" id="cb15" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb15-1">multiply2(b, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>array([ 0.,  2.,  4.,  6.,  8., 10., 12., 14., 16., 18.])</code></pre>
</div>
</div>
<p>This time the input array stays the same, ie., the modification remained in the scope of the function.</p>
<p>Despite it being very basic, it is actually more difficult to debug than for the toy example in real life cases. <br> For instance, in the middle of a long data preprocessing pipeline. If you load your data <em>once</em> and run the preprocessing pipeline <em>once</em>, you will probably not notice the bug (that’s the tricky thing!).<br> But if the loaded data are passed more than once through the pipeline (without reloading the whole data), each pass will be actually feeding <em>different input</em>.<br> For example, if you run K-Fold cross-validation, most likely it won’t crash or anything, but you will be passing K different datasets to your model and your validation will be just rubbish!</p>
<p><strong>Conclusions:</strong> <br> - <code>array *= something</code> is very different from <code>array = array * something</code> <br> - You’d better be <em>really</em> sure of what you’re doing with <code>array = array * something</code>.</p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>



 ]]></description>
  <category>python</category>
  <category>numpy</category>
  <guid>https://fabridamicelli.github.io/posts/numpy-array-in-place.html</guid>
  <pubDate>Sun, 10 May 2020 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Does your embedding make sense?</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/interactive-embedding.html</link>
  <description><![CDATA[ 




<p>It’s not about the projections for the rest of 2020, I promise. Nor 2021.</p>
<p>TL;DR:</p>
<p></p><div id="tweet-66048"></div><script>tweet={"url":"https:\/\/twitter.com\/fabridamicelli\/status\/1205136026987089920","author_name":"Fabrizio Damicelli","author_url":"https:\/\/twitter.com\/fabridamicelli","html":"\u003Cblockquote class=\"twitter-tweet\" align=\"center\"\u003E\u003Cp lang=\"en\" dir=\"ltr\"\u003EDoes your embedding make any (human) sense? Take a *quick, interactive look* at its labels (if you have) &amp; compare it w\/clusters.\u003Cbr\u003EThanks to great, idiomatic Altair! \u003Ca href=\"https:\/\/twitter.com\/jakevdp?ref_src=twsrc%5Etfw\"\u003E@jakevdp\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/vega_vis?ref_src=twsrc%5Etfw\"\u003E@vega_vis\u003C\/a\u003E\u003Cbr\u003E \u003Cbr\u003E-Code: \u003Ca href=\"https:\/\/t.co\/vpWRU6fs6H\"\u003Ehttps:\/\/t.co\/vpWRU6fs6H\u003C\/a\u003E\u003Cbr\u003E-Example: \u003Ca href=\"https:\/\/t.co\/67F7AuDoNr\"\u003Ehttps:\/\/t.co\/67F7AuDoNr\u003C\/a\u003E\u003Ca href=\"https:\/\/twitter.com\/PyData?ref_src=twsrc%5Etfw\"\u003E@PyData\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/hashtag\/Python?src=hash&amp;ref_src=twsrc%5Etfw\"\u003E#Python\u003C\/a\u003E \u003Ca href=\"https:\/\/twitter.com\/python_tip?ref_src=twsrc%5Etfw\"\u003E@python_tip\u003C\/a\u003E \u003Ca href=\"https:\/\/t.co\/PIeDuNZ2gf\"\u003Epic.twitter.com\/PIeDuNZ2gf\u003C\/a\u003E\u003C\/p\u003E&mdash; Fabrizio Damicelli (@fabridamicelli) \u003Ca href=\"https:\/\/twitter.com\/fabridamicelli\/status\/1205136026987089920?ref_src=twsrc%5Etfw\"\u003EDecember 12, 2019\u003C\/a\u003E\u003C\/blockquote\u003E\n\u003Cscript async src=\"https:\/\/platform.twitter.com\/widgets.js\" charset=\"utf-8\"\u003E\u003C\/script\u003E\n\n","width":550,"height":null,"type":"rich","cache_age":"3153600000","provider_name":"Twitter","provider_url":"https:\/\/twitter.com","version":"1.0"};document.getElementById("tweet-66048").innerHTML = tweet["html"];</script><p></p>
<p>Imagine you are working with high-dimensional data, that is, the position of each data point in that multidimensional space can be represented by a large number of other features/coordinates. For example, you measure a bunch of properties of a product where each item has some values associated, say, size, cost of production, price, CO2 footprint, etc. It could also be the case that your features are more abstract quantities. Instead of price or size, you could just have a bunch of numbers representing each item that don’t necessarily have a human meaning, for instance a vector like this [0.11, 0.34, 0.15, 0.9]. Hopefully, those number actually mean something (whatever we understand by “meaning something”). Hopefully. Things start to get trickier. A beautiful example of that are <a href="https://en.wikipedia.org/wiki/Word_embedding">word-embeddings</a>, which is the thing I was originally playing with when I needed the visualization that I will show you. These embeddings represent each word with a vector, typically having between 300 and 1000 dimensions. That’s what I mean by high-dimensional. What the coordinates actually mean in that case is highly non-trivial and you can find out about it in the above-mentioned article. Other datasets are even more massive in terms of the number of features though, e.g., <a href="https://en.wikipedia.org/wiki/DNA_microarray">gene expression data</a> are usually orders of magnitude larger.</p>
<p>I’d be saying nothing new if I pointed out that humans (we typically don’t talk about that with other animals) have a hard time visualizing space with more than three dimensions. Even with <a href="https://en.wikipedia.org/wiki/List_of_animals_by_number_of_neurons">86 billion of neurons</a> between their ears. At this point, several of you will be saying: “but! Carl Sagan… bla, bla”.. In case you’re too young, too old or simple had something else better to do and didn’t watch that episode, just watch this short video and then get back – you won’t regreat:</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video1" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="https://www.youtu.be/N0WjV6MmCyM"></video></div>
<p>Back to the data. People do all sorts of tricks to wrap their mind around those wild, high-dimensional data in spaces with really funky shapes and fundamentally counterintuitive to our daily spatial perception of the world. Here comes a whole zoo of <a href="https://en.wikipedia.org/wiki/Dimensionality_reduction">dimensionality reduction methods</a> (e.g., PCA, tSNE) that project your data down to something your visual system can deal with. Of course, visualization is just one use case, but you may also want to store your data more efficiently or find outliers, or simply make life easier to your machine learning algorithm. We won’t talk about those here.</p>
<section id="why-bother-the-good-the-bad-and-the-ugly-metric." class="level4">
<h4 class="anchored" data-anchor-id="why-bother-the-good-the-bad-and-the-ugly-metric.">Why bother? <em>The good, the bad and the ugly</em> metric.</h4>
<p>Let’s say you have your projected data in 2D, for example, after tSNE. First things first: you might want to check if the projection that your method just spit out makes any sense at all. But, why, what can go wrong? Well, a lot. For instance, your dimensionality reduction method might be using an inappropiate metric. In other words, the algorithm could be using a notion of distance between points in the multidimensional space which does not capture some fundamental aspect of the funky space that those data points live in. Thus, further operations we do with/to our data might be strongly misleading. That is not what we want. To keep it concrete, just take a look at these nice examples from the <a href="https://umap-learn.readthedocs.io/en/latest/parameters.html#metric">documentation of the UMAP library</a>, where the effect of using different metrics is clearly depicted.</p>
<p>Some libraries, like UMAP, also allow you to <a href="https://umap-learn.readthedocs.io/en/latest/document_embedding.html">document your embedding</a> or <a href="https://umap-learn.readthedocs.io/en/latest/plotting.html">plot interactive figures</a>. But you might have a tougher luck this time around and just get a cloud of unintelligible points scattered when you plot the 2D-projected data. In that case, you might find it useful to interact with it by looking at the labels of your data. The labels can be anything, like <em>a priori</em> known categories the result of your favourite clustering method.</p>
<p>That’s what you came for :) So without further ado, on to the code.</p>
<div id="cell-8" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> altair <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> alt</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_digits</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.manifold <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> TSNE</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.cluster <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> KMeans</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_interactive_embedding(</span>
<span id="cb1-9">    source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-10">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-11">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-12">    target_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-13">    color_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>,</span>
<span id="cb1-14">    alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.9</span>,</span>
<span id="cb1-15">    markersize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">40</span>,</span>
<span id="cb1-16">    grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>,</span>
<span id="cb1-17">    max_n_show <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">25</span>,</span>
<span id="cb1-18">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>),</span>
<span id="cb1-19">    filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-20">):</span>
<span id="cb1-21">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb1-22"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Simple function for interactive visualization labels of a 2D embedding</span></span>
<span id="cb1-23"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    (e.g., PCA projection).</span></span>
<span id="cb1-24"></span>
<span id="cb1-25"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Altair Chart is generated (as html), where one can brush over the scatter</span></span>
<span id="cb1-26"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    plots and given labels are shown.</span></span>
<span id="cb1-27"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Color can be optionally mapped to values as well (e.g., to compare embedding</span></span>
<span id="cb1-28"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    with a clustering method).</span></span>
<span id="cb1-29"></span>
<span id="cb1-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    This is a quick adaptation of this example:</span></span>
<span id="cb1-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    https://altair-viz.github.io/gallery/scatter_linked_table.html</span></span>
<span id="cb1-32"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    </span></span>
<span id="cb1-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Parameters</span></span>
<span id="cb1-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    ----------</span></span>
<span id="cb1-35"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    source: pandas Dataframe</span></span>
<span id="cb1-36"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Data to plot.</span></span>
<span id="cb1-37"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    x: str</span></span>
<span id="cb1-38"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Column name of x coordinate data.</span></span>
<span id="cb1-39"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This name will be also used as axis label.</span></span>
<span id="cb1-40"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    y: str</span></span>
<span id="cb1-41"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Column name of y coordinate data.</span></span>
<span id="cb1-42"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        This name will be also used as axis label.</span></span>
<span id="cb1-43"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    target_col: str</span></span>
<span id="cb1-44"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Column name of target data, i.e., the labels to brush over.</span></span>
<span id="cb1-45"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    color_col: str, optional. Default None.</span></span>
<span id="cb1-46"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Column name of data encoding color.</span></span>
<span id="cb1-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If None, all points will have same color.</span></span>
<span id="cb1-48"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    alpha: float (0-1), optional. Default .9.</span></span>
<span id="cb1-49"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Opacity of points.</span></span>
<span id="cb1-50"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    markersize: float, int, optional. Default 40.</span></span>
<span id="cb1-51"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Size of the points.</span></span>
<span id="cb1-52"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    grid: bool, optional. Default True.</span></span>
<span id="cb1-53"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Grid in the background. Set to False to remove it.</span></span>
<span id="cb1-54"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    max_n_show: int, optional. Dafault 25.</span></span>
<span id="cb1-55"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Maximum number of (target) labels to show when brushing over the points.</span></span>
<span id="cb1-56"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    figsize: tuple (floats), optional. Default (500, 500).</span></span>
<span id="cb1-57"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Values for (width, height)</span></span>
<span id="cb1-58"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    filename: str, optional. Default None.</span></span>
<span id="cb1-59"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        If given, the chart will be saved.</span></span>
<span id="cb1-60"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        The name must include extension - one of [.json, .html, .svg, .png].</span></span>
<span id="cb1-61"></span>
<span id="cb1-62"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    Returns</span></span>
<span id="cb1-63"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    -------</span></span>
<span id="cb1-64"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    chart: Altair Chart</span></span>
<span id="cb1-65"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">        Instance of chart for further tweaking</span></span>
<span id="cb1-66"></span>
<span id="cb1-67"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">    """</span></span>
<span id="cb1-68">    width, height <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> figsize</span>
<span id="cb1-69">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Brush for selection</span></span>
<span id="cb1-70">    brush <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alt.selection(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'interval'</span>)</span>
<span id="cb1-71"></span>
<span id="cb1-72">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Scatter Plot</span></span>
<span id="cb1-73">    points <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alt.Chart(</span>
<span id="cb1-74">        source,</span>
<span id="cb1-75">        width<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>width,</span>
<span id="cb1-76">        height<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>height</span>
<span id="cb1-77">    ).mark_circle(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>markersize).encode(</span>
<span id="cb1-78">        x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>x,</span>
<span id="cb1-79">        y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y,</span>
<span id="cb1-80">        color<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.value(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'steelblue'</span>)</span>
<span id="cb1-81">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> color_col <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">is</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span></span>
<span id="cb1-82">              <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">else</span> alt.Color(color_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":N"</span>, scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Scale(scheme<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'Spectral'</span>))</span>
<span id="cb1-83"></span>
<span id="cb1-84">    ).add_selection(brush)</span>
<span id="cb1-85"></span>
<span id="cb1-86">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Base chart for data tables</span></span>
<span id="cb1-87">    ranked_text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alt.Chart(source).mark_text().encode(</span>
<span id="cb1-88">        y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>alt.Y(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'row_number:O'</span>,axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>)</span>
<span id="cb1-89">    ).transform_window(</span>
<span id="cb1-90">        row_number<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'row_number()'</span></span>
<span id="cb1-91">    ).transform_filter(</span>
<span id="cb1-92">        brush</span>
<span id="cb1-93">    ).transform_window(</span>
<span id="cb1-94">        rank<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'rank(row_number)'</span></span>
<span id="cb1-95">    ).transform_filter(</span>
<span id="cb1-96">        alt.datum.rank <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">&lt;</span> max_n_show</span>
<span id="cb1-97">    )</span>
<span id="cb1-98"></span>
<span id="cb1-99">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Data Tables</span></span>
<span id="cb1-100">    text <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ranked_text.encode(text<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">":N"</span>).properties(title<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>target_col)</span>
<span id="cb1-101"></span>
<span id="cb1-102">    chart <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> alt.hconcat(</span>
<span id="cb1-103">    points,</span>
<span id="cb1-104">    text,</span>
<span id="cb1-105">    ).configure_axis(grid<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>grid)</span>
<span id="cb1-106"></span>
<span id="cb1-107">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">if</span> filename:</span>
<span id="cb1-108">        chart.save(filename)</span>
<span id="cb1-109"></span>
<span id="cb1-110">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> chart</span></code></pre></div>
</details>
</div>
<div id="cell-9" class="cell">
<details open="" class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Get digits dataset</span></span>
<span id="cb2-2">digits <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_digits()</span>
<span id="cb2-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Cluster it with kmeans and get the predicted labels</span></span>
<span id="cb2-4">kmlabel <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> KMeans(n_clusters<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>, n_jobs<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).fit_predict(digits.data)</span>
<span id="cb2-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Embed in 2D with tSNE</span></span>
<span id="cb2-6">embedding <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> TSNE(n_components<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>, n_iter<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>).fit_transform(digits.data)</span>
<span id="cb2-7"></span>
<span id="cb2-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Turn data into a dataframe</span></span>
<span id="cb2-9">digits_df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame({</span>
<span id="cb2-10">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tSNE-1"</span>: embedding[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>],</span>
<span id="cb2-11">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tSNE-2"</span>: embedding[:, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>],    </span>
<span id="cb2-12">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"digit"</span>: digits.target,</span>
<span id="cb2-13">    <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KM-label"</span>: kmlabel</span>
<span id="cb2-14">})</span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Make the chart</span></span>
<span id="cb2-17">plot_interactive_embedding(</span>
<span id="cb2-18">    source<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>digits_df,</span>
<span id="cb2-19">    x<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tSNE-1"</span>,</span>
<span id="cb2-20">    y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"tSNE-2"</span>,</span>
<span id="cb2-21">    target_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"digit"</span>,</span>
<span id="cb2-22">    color_col<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"KM-label"</span>,</span>
<span id="cb2-23">    figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">450</span>),</span>
<span id="cb2-24">    filename<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"your_filename"</span></span>
<span id="cb2-25">)</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-12-12-interactive-embedding_files/figure-html/cell-3-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>You can save the output by passing a <code>filename</code> argument. That will generate an interactive file like <a href="https://nbviewer.jupyter.org/github/fabridamicelli/pythonicity/blob/master/figs/interactiveEmbedding.html">this</a>.</p>
</section>
<section id="all-the-code-can-be-found-here." class="level4">
<h4 class="anchored" data-anchor-id="all-the-code-can-be-found-here.">All the code can be found <a href="https://github.com/fabridamicelli/pythonicity">here</a>.</h4>
</section>
<section id="a-couple-of-links-worth-checking-out" class="level4">
<h4 class="anchored" data-anchor-id="a-couple-of-links-worth-checking-out">A couple of links worth checking out:</h4>
<ul>
<li><a href="https://altair-viz.github.io/">Altair</a>: “Declarative Visualization in Python”. This does the job under the hood of what I showed you. I did not even scratch the surface of that powerful, neat library.</li>
<li><a href="https://grantcuster.github.io/umap-explorer/">This</a> and <a href="http://doc.gold.ac.uk/~lfedd001/three/demo.html">this</a> for cool visualizations of UMAP projections.</li>
<li><a href="https://rasahq.github.io/whatlies/">whatlies</a>: “A library that tries help you to understand. What lies in word embeddings?”. This didn’t exist when I wrote this function – would be my first choice now. It goes way beyond of what I showed and has integration with other NLP tools as well.</li>
</ul>
<p>Bonus: Funny games in high dimensions!</p>
<div class="quarto-video"><video id="video_shortcode_videojs_video2" class="video-js vjs-default-skin vjs-fluid" controls="" preload="auto" data-setup="{}" title=""><source src="https://www.youtu.be/6_yU9eJ0NxA"></video></div>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>

 ]]></description>
  <category>python</category>
  <category>dataviz</category>
  <category>dimensionality-reduction</category>
  <guid>https://fabridamicelli.github.io/posts/interactive-embedding.html</guid>
  <pubDate>Thu, 12 Dec 2019 00:00:00 GMT</pubDate>
</item>
<item>
  <title>Divide and conquer</title>
  <dc:creator>Fabrizio Damicelli</dc:creator>
  <link>https://fabridamicelli.github.io/posts/divide-and-conquer.html</link>
  <description><![CDATA[ 




<p>TL; DR: If you need to compute many vector pairwise metrics in batches, try <code>sklearn.metrics.pairwise_distances_chunked</code></p>
<section id="the-problem" class="level2">
<h2 class="anchored" data-anchor-id="the-problem">The problem</h2>
<p>I had to compute pairwise <a href="https://en.wikipedia.org/wiki/Cosine_similarity">cosine distances</a> for a large list of high-dimensional vectors (e.g.&nbsp;<a href="https://en.wikipedia.org/wiki/Word_embedding">word embedding</a>). After a couple of (very bad) possible solutions I found a reasonable one, of course, standing on the shoulders of giants: the sklearn function <code>sklearn.metrics.pairwise_distances_chunked</code>. It is pretty much a one-liner and you don’t need to care about manually splitting/parallelizing things. This is a quick write-up for other people to save that time.</p>
<p>The intuition behind the computation we want to achieve is depicted in the following plot:</p>
<center>
<img src="https://fabridamicelli.github.io/images/divide-and-conquer/vector-distances.png" height="200">
</center>
<p><em>Two vectors in 2D space represented as points. The blue line shows the <em>euclidean</em> distance between the vectors. The <img src="https://latex.codecogs.com/png.latex?%5Ccos(%5Calpha)"> is the <em>cosine</em> distance.</em></p>
<div id="cell-6" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Import everything we need</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> matplotlib.pyplot <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> plt</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> numpy <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> np</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> scipy.spatial.distance <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cosine</span>
<span id="cb1-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics.pairwise <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> cosine_distances</span>
<span id="cb1-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pairwise_distances_chunked</span>
<span id="cb1-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> tqdm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> tqdm</span>
<span id="cb1-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> seaborn <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> sns</span>
<span id="cb1-12"></span>
<span id="cb1-13">sns.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">set</span>(context<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"notebook"</span>, font_scale<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">1.4</span>, style<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"whitegrid"</span>)</span></code></pre></div>
</details>
</div>
<p>For the sake of presentation and simplicity, we are just going to create and use a bunch of random vectors. And that bunch is going to be relatively large (to compute on a not-so-large laptop).</p>
<p>Let’s first get an idea of how many values need to compute if we take say 50 thousand vectors, which is not unrealistic at all (e.g., that could be taking all nouns of a word embedding):</p>
<div id="cell-8" class="cell">
<div class="sourceCode cell-code" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_000</span></span>
<span id="cb2-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of pairwise distances to be computed"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>(n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> (n_vectors<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Number of pairwise distances to be computed 1249975000</code></pre>
</div>
</div>
<p>Oh, that is indeed quite a few of them.</p>
</section>
<section id="the-default-solution" class="level2">
<h2 class="anchored" data-anchor-id="the-default-solution">The default solution</h2>
<p>The most straight forward to do this is with scipy/sklearn pairwise distances functions as follows (we are going to time it to get an idea of how the problem scales).</p>
<div id="cell-11" class="cell">
<div class="sourceCode cell-code" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb4-2"></span>
<span id="cb4-3">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5_000</span></span>
<span id="cb4-4">n_dimensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>   </span>
<span id="cb4-5"></span>
<span id="cb4-6">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb4-7"></span>
<span id="cb4-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Compute pairwise distances with function from sklearn</span></span>
<span id="cb4-9">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_distances(all_vectors)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 1.53 s, sys: 347 ms, total: 1.88 s
Wall time: 286 ms</code></pre>
</div>
</div>
<p>So far, so good. But what happens if we want to compute it for more vectors?</p>
<div id="cell-13" class="cell">
<div class="sourceCode cell-code" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">%%</span>time</span>
<span id="cb6-2"></span>
<span id="cb6-3">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15_000</span></span>
<span id="cb6-4"></span>
<span id="cb6-5">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb6-6">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_distances(all_vectors)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>CPU times: user 5.75 s, sys: 3.22 s, total: 8.97 s
Wall time: 1.99 s</code></pre>
</div>
</div>
<p>As we see, we have 3 times more vectors, but the computation takes ~9 times longer! The reason for that is that the complexity of the problem scales non-linearly with the size of the input (number of vectors). In particular, the complexity is <img src="https://latex.codecogs.com/png.latex?O(n%5E2)">, since we are filling the upper half of a square matrix, which grows as the square of number of vectors divided by two (which does not count for the limit case).</p>
<p>In practice, we don’t care much about those calculations as long as our computer is able to manage it in a reasonable time.</p>
<p>So how about having more vectors, say 30 or 50 thousand?</p>
<section id="closer-look-at-the-scaling" class="level3">
<h3 class="anchored" data-anchor-id="closer-look-at-the-scaling">Closer look at the scaling</h3>
<p>Let’s examine the computational complexity we mentioned above with some quick numerical experiments.</p>
<div id="cell-16" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> evaluate_scaling(func, n_vectors_vals, n_dimensions<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span>):</span>
<span id="cb8-2">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">"""Return times of func execution for n_vectors_vals"""</span></span>
<span id="cb8-3">    times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> []</span>
<span id="cb8-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> n_vectors <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> tqdm(n_vectors_vals):</span>
<span id="cb8-5">        all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))  </span>
<span id="cb8-6">        st <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> time.time()</span>
<span id="cb8-7">        distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> func(all_vectors)</span>
<span id="cb8-8">        times.append(time.time()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>st)</span>
<span id="cb8-9">        <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">del</span> distances</span>
<span id="cb8-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> times</span>
<span id="cb8-11"></span>
<span id="cb8-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_scaling(n_vectors_vals, times, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs):    </span>
<span id="cb8-13">    plt.plot(n_vectors_vals, times, linewidth<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">.8</span>, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">**</span>kwargs)</span>
<span id="cb8-14">    plt.xlabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Number of vectors"</span>)</span>
<span id="cb8-15">    plt.ylabel(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Time elapsed (seconds)"</span>)</span>
<span id="cb8-16">    plt.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, linestyle<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--"</span>, alpha<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.7</span>)</span></code></pre></div>
</details>
</div>
<div id="cell-17" class="cell">
<div class="sourceCode cell-code" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1">n_vectors_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">500</span>)</span>
<span id="cb9-2">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate_scaling(cosine_distances, n_vectors_vals)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 39/39 [00:49&lt;00:00,  1.27s/it]</code></pre>
</div>
</div>
<div id="cell-18" class="cell">
<div class="sourceCode cell-code" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb11-1">plot_scaling(n_vectors_vals, times)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-8-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>We can use what we know about the complexity (<img src="https://latex.codecogs.com/png.latex?O(n%5E2)">) to fit a curve. In other words, we are going to fit a quadratic function that predicts the time it takes to compute all the pairwise distances as a function of the number of vectors. After that, we can use that function to extrapolate and estimate the performance for a much larger number of vectors.</p>
<center>
<img src="https://fabridamicelli.github.io/images/divide-and-conquer/xkcd-extrapolating.png">
</center>
<div id="cell-21" class="cell">
<div class="sourceCode cell-code" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb12-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit a 2nd degree polynomial and get the polynomial evaluator</span></span>
<span id="cb12-2">fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.polyfit(n_vectors_vals, times, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  </span>
<span id="cb12-3">poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.poly1d(fit)</span>
<span id="cb12-4"></span>
<span id="cb12-5"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check our fit</span></span>
<span id="cb12-6">plot_scaling(n_vectors_vals, times, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual"</span>)</span>
<span id="cb12-7">plot_scaling(n_vectors_vals, poly(n_vectors_vals), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quadratic Fit"</span>)</span>
<span id="cb12-8">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-9-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>The fit looks approximately correct. Remember, we don’t need to get a perfectly accurate estimate. We rather want to know if we should grab a coffee while the computation runs, let it compute overnight or if it is unfeasible with our hardware.</p>
<p>Now we extrapolate for more vectors:</p>
<div id="cell-23" class="cell">
<div class="sourceCode cell-code" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb13-1">n_vectors_large <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50000</span>)</span>
<span id="cb13-2">plot_scaling(n_vectors_large, poly(n_vectors_large))</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-10-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Well that doesn’t sound too bad: it should take around 40 seconds to compute the distances for 50 thousand vectors. <br> Let’s give it a try:</p>
<div id="cell-25" class="cell">
<div class="sourceCode cell-code" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb14-1">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_000</span></span>
<span id="cb14-2"></span>
<span id="cb14-3">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb14-4">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_distances(all_vectors)</span></code></pre></div>
</div>
<pre><code>[I 15:19:07.791 LabApp] KernelRestarter: restarting kernel (1/5), keep random ports
kernel 4055ff16-c49b-4a76-9068-e899d001fb85 restarted</code></pre>
<p>Ups! We’ve blown up the memory and forced the kernel to commit suicide. <br> If you’re running the code along and 50 thousand still works in your computer, just try a higher number, you’ll get there pretty soon. My machine is fine until ~30 thousand vectors.</p>
<p>In short, what we thought was our initial problem (computation time) is actually secondary (it <em>would take</em> less than a minute). But either the result itself (cosine distances matrix) or other structures during intermediate computations simply don’t fit in memory.</p>
</section>
</section>
<section id="solution-first-attempt" class="level2">
<h2 class="anchored" data-anchor-id="solution-first-attempt">Solution: first attempt</h2>
<p>Iterate and compute the values one by one instead of computing it with the <code>cosine_distances</code> function. <br> Spoiler: Bad idea. <br> Let’s see:</p>
<div id="cell-29" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb16" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb16-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cosine_distances_iter(all_vectors):</span>
<span id="cb16-2">    n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> all_vectors.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>]</span>
<span id="cb16-3">    distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_vectors, n_vectors))</span>
<span id="cb16-4">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># D is symmetric, so we don't want to compute twice - just use upper diag indices</span></span>
<span id="cb16-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> i, j <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span>np.triu_indices(n_vectors, k<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)):</span>
<span id="cb16-6">        distances[i, j] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine(all_vectors[i], all_vectors[j])</span>
<span id="cb16-7">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> distances</span></code></pre></div>
</details>
</div>
<div id="cell-30" class="cell">
<div class="sourceCode cell-code" id="cb17" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb17-1">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span></span>
<span id="cb17-2">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb17-3">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_distances_iter(all_vectors)</span></code></pre></div>
</div>
<p>As the distance matrix is symmetric, we don’t repeat the computation and thus here we just show the upper triangle.<br> Each entry <img src="https://latex.codecogs.com/png.latex?D_%7Bij%7D"> of the distance matrix corresponds to the cosine distance between the vectors <img src="https://latex.codecogs.com/png.latex?i"> and <img src="https://latex.codecogs.com/png.latex?j">.</p>
<div id="cell-32" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb18" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb18-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> plot_distances_heatmap(distances):    </span>
<span id="cb18-2">    sns.heatmap(</span>
<span id="cb18-3">        distances, </span>
<span id="cb18-4">        mask<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=~</span>np.triu(distances).astype(<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span>), </span>
<span id="cb18-5">        cbar_kws<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"label"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Cosine distance"</span>},</span>
<span id="cb18-6">        cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"magma"</span>,</span>
<span id="cb18-7">        square<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, </span>
<span id="cb18-8">        xticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>, </span>
<span id="cb18-9">        yticklabels<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>,</span>
<span id="cb18-10">    )</span>
<span id="cb18-11">    plt.title(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Distance Matrix"</span>)</span>
<span id="cb18-12">    plt.show()</span></code></pre></div>
</details>
</div>
<div id="cell-33" class="cell">
<div class="sourceCode cell-code" id="cb19" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb19-1">plot_distances_heatmap(distances)</span></code></pre></div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-15-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>Now, how does it scale? We can do the same curve fitting as above and project for a larger number of vectors.</p>
<div id="cell-35" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb20" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb20-1">n_vectors_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb20-2">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate_scaling(cosine_distances_iter, n_vectors_vals)</span>
<span id="cb20-3"></span>
<span id="cb20-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fit a 2nd degree polynomial and get the polynomial evaluator</span></span>
<span id="cb20-5">fit <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.polyfit(n_vectors_vals, times, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2</span>)  </span>
<span id="cb20-6">poly <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.poly1d(fit)</span>
<span id="cb20-7"></span>
<span id="cb20-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Check our fit</span></span>
<span id="cb20-9">plot_scaling(n_vectors_vals, times, label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Actual"</span>)</span>
<span id="cb20-10">plot_scaling(n_vectors_vals, poly(n_vectors_vals), label<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Quadratic Fit"</span>)</span>
<span id="cb20-11">plt.legend()<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">;</span></span></code></pre></div>
</details>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 10/10 [01:03&lt;00:00,  6.36s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-16-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>And the extrapolation looks like this:</p>
<div id="cell-37" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb22" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb22-1">n_vectors_large <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>)</span>
<span id="cb22-2">plot_scaling(n_vectors_large, poly(n_vectors_large))</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-17-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<p>That is going to take a while – way longer than grabbing a coffee. <br> <em>Conclusion</em>: there must be a better way!</p>
</section>
<section id="same-giants-same-shoulders-scikit-learn-to-the-rescue" class="level2">
<h2 class="anchored" data-anchor-id="same-giants-same-shoulders-scikit-learn-to-the-rescue">Same giants, same shoulders: <strong>scikit-learn</strong> to the rescue</h2>
<p>A much better alternative was to look into the scikit-learn library. <br> It turns out there is a function <code>pairwise_distances_chunked</code>, which does exactly what we want. As the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise_distances_chunked.html">documentation</a> explains, this function creates a Python <em>generator</em> that will build up a distance matrix <em>chunk by chunk</em>, thus computing the distances as lazily and returning the intermediate results. The following example will be hopefully useful:</p>
<div id="cell-40" class="cell">
<div class="sourceCode cell-code" id="cb23" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb23-1">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">20_000</span></span>
<span id="cb23-2">n_dimensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span> </span>
<span id="cb23-3"></span>
<span id="cb23-4">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb23-5"></span>
<span id="cb23-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># We create an empty placeholder for the results, so that we </span></span>
<span id="cb23-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># can visualize the intermediate steps</span></span>
<span id="cb23-8">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_vectors, n_vectors))</span></code></pre></div>
</div>
<p>Instead of computing and storing <em>all</em> the results, we construct the generator first:</p>
<div id="cell-42" class="cell">
<div class="sourceCode cell-code" id="cb24" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb24-1">chunk_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pairwise_distances_chunked(all_vectors, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>)</span>
<span id="cb24-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span>(chunk_generator)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>generator</code></pre>
</div>
</div>
<p>Now we can call the next method and so generate the first chunk of results. <br> Like with any other Python generator, we can repeat that call until the generator is exhausted.</p>
<div id="cell-44" class="cell">
<div class="sourceCode cell-code" id="cb26" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb26-1">chunk1 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(chunk_generator)</span>
<span id="cb26-2"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shape of chunk 1:"</span>, chunk1.shape)</span>
<span id="cb26-3">chunk2 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(chunk_generator)</span>
<span id="cb26-4"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shape of chunk 2:"</span>, chunk2.shape)</span>
<span id="cb26-5">chunk3 <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(chunk_generator)</span>
<span id="cb26-6"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Shape of chunk 3:"</span>, chunk3.shape)</span>
<span id="cb26-7"></span>
<span id="cb26-8"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Total size along first dimension :"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">sum</span>((chunk1.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], chunk2.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>], chunk3.shape[<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>])))</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>Shape of chunk 1: (6710, 20000)
Shape of chunk 2: (6710, 20000)
Shape of chunk 3: (6580, 20000)
Total size along first dimension : 20000</code></pre>
</div>
</div>
<p>As we observe on the shape of the generated results, the rendered chunk is a <em>vertical slice</em> of the complete distance matrix. <br> We can visualize it (yellow corresponds to the computed values):</p>
<div id="cell-46" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb28" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb28-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># </span><span class="al" style="color: #AD0000;
background-color: null;
font-style: inherit;">WARNING</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">: running this cell might take quite a bit of memory</span></span>
<span id="cb28-2"></span>
<span id="cb28-3">chunk_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pairwise_distances_chunked(all_vectors, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>)</span>
<span id="cb28-4"></span>
<span id="cb28-5">fig, axes <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> plt.subplots(ncols<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span>, figsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>))</span>
<span id="cb28-6">chunks_idx <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">range</span>(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">4</span>)  <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># this depends on the number of total chunks (which I happen to know is 3 here)</span></span>
<span id="cb28-7">current_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span>
<span id="cb28-8">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.zeros((n_vectors, n_vectors))</span>
<span id="cb28-9"><span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> ax, c <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">zip</span>(axes.flat, chunks_idx):</span>
<span id="cb28-10">    chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">next</span>(chunk_generator)</span>
<span id="cb28-11">    n_rows, _ <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunk.shape</span>
<span id="cb28-12">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Update distances matrix</span></span>
<span id="cb28-13">    distances[current_row: current_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> n_rows, :] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> chunk</span>
<span id="cb28-14">    current_row <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+=</span> n_rows    </span>
<span id="cb28-15">    ax.imshow(distances, cmap<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"RdYlBu_r"</span>)        </span>
<span id="cb28-16">    ax.set_title(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"Distance Matrix after chunk</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>c<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, fontsize<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">15</span>)</span>
<span id="cb28-17">    ax.grid(<span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span>
<span id="cb28-18">    ax.set_xticks([])</span>
<span id="cb28-19">    ax.set_yticks([])</span></code></pre></div>
</details>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-21-output-1.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>The size of each chunk will be figured out automatically by scikit-learn, no need to worry about that. If the results are small enough, it might just dispatch it all in one batch.</p>
</div>
</div>
<section id="back-to-50k" class="level3">
<h3 class="anchored" data-anchor-id="back-to-50k">Back to 50K</h3>
<p>So far so good. But our original problem was substantially larger than the example above, namely 50 (not 20) thousand vectors, which we already saw translates into many more computations. <br></p>
<p>Now we are going to test the chunked approach with more vectors – that’s what you came for :)</p>
<div id="cell-49" class="cell">
<div class="sourceCode cell-code" id="cb29" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb29-1">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_000</span></span>
<span id="cb29-2">n_dimensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> </span>
<span id="cb29-3">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb29-4"></span>
<span id="cb29-5">chunk_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pairwise_distances_chunked(all_vectors, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>)</span></code></pre></div>
</div>
<p>Assuming the final whole array fits in memory, we could collect all chunks and then concatenate them, like this:</p>
<div class="sourceCode" id="cb30" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb30-1">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack(chunk_generator)</span></code></pre></div>
<p>which is very nice, but will stop working with numpy 1.16, thus we need another container</p>
<div id="cell-51" class="cell">
<div class="sourceCode cell-code" id="cb31" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb31-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># This might take a lot of RAM, so depending on your hardware you might just skip the concatenation</span></span>
<span id="cb31-2">distances <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.vstack([chunk <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chunk_generator])</span>
<span id="cb31-3"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"distances shape: "</span>, distances.shape)</span></code></pre></div>
<div class="cell-output cell-output-stdout">
<pre><code>distances shape:  (50000, 50000)</code></pre>
</div>
</div>
<p><strong>Voilà!</strong> <br> We just computed the pairwise cosine distance for the <em>50 thousand</em> vectors! If your matrix distance is too big such that cannot be concatenated into one array, then you can simply do whatever you need to with the individual chunks and save the intermediate results.</p>
<p>For the sake of completeness, let’s evaluate the scaling of that function:</p>
<div id="cell-54" class="cell">
<details class="code-fold">
<summary>Code</summary>
<div class="sourceCode cell-code" id="cb33" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb33-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">def</span> cosine_distance_chunks(all_vectors):</span>
<span id="cb33-2">    chunk_generator <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pairwise_distances_chunked(all_vectors, metric<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"cosine"</span>)</span>
<span id="cb33-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">return</span> np.vstack([chunk <span class="cf" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">for</span> chunk <span class="kw" style="color: #003B4F;
background-color: null;
font-weight: bold;
font-style: inherit;">in</span> chunk_generator])  </span></code></pre></div>
</details>
</div>
<div id="cell-55" class="cell">
<div class="sourceCode cell-code" id="cb34" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb34-1">n_vectors_vals <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.arange(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">50_001</span>, <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10_000</span>)</span>
<span id="cb34-2">times <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> evaluate_scaling(cosine_distance_chunks, n_vectors_vals)</span>
<span id="cb34-3"></span>
<span id="cb34-4">plot_scaling(n_vectors_vals, times)</span></code></pre></div>
<div class="cell-output cell-output-stderr">
<pre><code>100%|██████████| 5/5 [01:10&lt;00:00, 14.12s/it]</code></pre>
</div>
<div class="cell-output cell-output-display">
<div>
<figure class="figure">
<p><img src="https://fabridamicelli.github.io/posts/2019-11-30-divide-and-conquer_files/figure-html/cell-25-output-2.png" class="img-fluid figure-img"></p>
</figure>
</div>
</div>
</div>
</section>
<section id="sanity-check-compare-to-pure-sklearn-function" class="level3">
<h3 class="anchored" data-anchor-id="sanity-check-compare-to-pure-sklearn-function">Sanity check: compare to pure sklearn function</h3>
<div id="cell-57" class="cell">
<div class="sourceCode cell-code" id="cb36" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb36-1">n_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">30_000</span></span>
<span id="cb36-2">n_dimensions <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">300</span> </span>
<span id="cb36-3">all_vectors <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> np.random.random(size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>(n_vectors, n_dimensions))</span>
<span id="cb36-4"></span>
<span id="cb36-5">distances_skl <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_distances(all_vectors)</span>
<span id="cb36-6">distances_chunk <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> cosine_distance_chunks(all_vectors)</span>
<span id="cb36-7"></span>
<span id="cb36-8">np.allclose(distances_skl, distances_chunk)</span></code></pre></div>
<div class="cell-output cell-output-display">
<pre><code>True</code></pre>
</div>
</div>
<div class="callout callout-style-default callout-tip callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Tip
</div>
</div>
<div class="callout-body-container callout-body">
<p><code>pairwise_distances_chunked</code> has some parameters that can be pretty useful: <br> - n_jobs: distribute the computation across cores (though you might want to experiment a bit since overhead might make it actually worse). <br> - metric: choose a metric different from cosine distance[1], such as euclidean distance or even your own defined function. <br> You can check the rest of them in the <a href="https://scikit-learn.org/stable/modules/generated/sklearn.metrics.pairwise_distances_chunked.html">documentation</a>. <br></p>
</div>
</div>
<p>[1]: The sharp eye might have noticed that the term “metric” is not quite correct here. Strictly speaking cosine distance is not a metric (the reason for that can be found <a href="https://en.wikipedia.org/wiki/Cosine_similarity">here</a>).</p>
<p>Take home message: Whenever you find yourself carrying out an data/machine learning task and you have the feeling that there must be a better way, check scikit-learn first. The odds that you’ll find something useful are really on your side.</p>
<p>References: - <a href="http://xkcd.com/605/">xkcd comic - extrapolation</a></p>
<div style="text-align: right; font-size: 40px; font-family: 'Inconsolata', monospace;">
<p>/Fin</p>
</div>
<div style="font-family: 'Inconsolata', monospace;">
<p>Any bugs, questions, comments, suggestions? Ping me on <a href="https://www.twitter.com/fabridamicelli">twitter</a> or drop me an e-mail (fabridamicelli at gmail).<br>
Share this article on your favourite platform:</p>
</div>


</section>
</section>

 ]]></description>
  <category>python</category>
  <category>scikit-learn</category>
  <category>scientific-computing</category>
  <guid>https://fabridamicelli.github.io/posts/divide-and-conquer.html</guid>
  <pubDate>Sat, 30 Nov 2019 00:00:00 GMT</pubDate>
</item>
</channel>
</rss>
