---
title: ""
---
</p><ul><li><p>GitHub: <a href=https://github.com/fabridamicelli>https://github.com/fabridamicelli</a></p><p align=center><img src=https://ghchart.rshah.org/fabridamicelli width=800></p></li>

## Open Source Contributions

### Python Packages

I created and maintain the following Python packages:

---

::: {layout="[[0.4, 0.6]]"}
### [**echoes**](https://github.com/fabridamicelli/echoes)
A scikit-learn compatible package for Machine Learning with Echo State Networks  
<a href="https://pepy.tech/project/echoes"><img src="https://pepy.tech/badge/echoes" width="80">
<a href="https://pepy.tech/project/echoes"><img src="https://pepy.tech/badge/echoes/month" height="16">
</a>

  - ü§ñ Machine learning with [Echo State Networks](http://www.scholarpedia.org/article/Echo_state_network) 
  - üß± High level API, scikit-learn compatible API, eg fit-predict interface
  - üí® Fast! (Thanks to [numba](http://numba.pydata.org/) ‚ú®)
  - üêç `pip install echoes`  
:::

---

::: {layout="[[0.4, 0.6]]"}
### [**kuramoto**](https://github.com/fabridamicelli/kuramoto)
Classical model to study synchronization phenomena  
<a href="https://pepy.tech/project/kuramoto"><img src="https://pepy.tech/badge/kuramoto" width="80">
<a href="https://pepy.tech/project/kuramoto"><img src="https://pepy.tech/badge/kuramoto/month" height="16">
</a>

  - ü§π Implementation of the [Kuramoto model](https://en.wikipedia.org/wiki/Kuramoto_model) on graphs.  
  - üêç `pip install kuramoto`  
::: 

---

::: {layout="[[0.4, 0.6]]"}
### [**ser**](https://github.com/fabridamicelli/ser)
Susceptible-Excited-Refractory, a dynamical model of spreading excitations  
<a href="https://pepy.tech/project/ser"><img src="https://pepy.tech/badge/ser" width="80">
<a href="https://pepy.tech/project/ser"><img src="https://pepy.tech/badge/ser/month" height="16">
</a>

  - üö• Implementation of classic SER model on graphs
  - üèÉ Powered by [numba](http://numba.pydata.org/) for speed.
  - üêç `pip install ser`  

:::

---

### TorchServe
[TorchServe](https://pytorch.org/serve) is a popular framework to deploy PyTorch-based neural networks.
I have [fixed bugs](https://github.com/pytorch/serve/pulls?q=is%3Apr+fabridamicelli+author%3Afabridamicelli) in Dockerfile and build scripts. I have also implemented CI (GitHub) workflows for continuous testing of docker images and containers.

### torchserve-docker
I put together [a simple GitHub-Action-based cron job](https://github.com/fabridamicelli/torchserve-docker) to build TorchServe images with specific Python version working out-of-the-box.
The images are hosted on [Dockerhub](https://hub.docker.com/r/fabridamicelli/torchserve).

### Translations

> - English ‚Üí German of the [HuggingFace Course](https://github.com/huggingface/course/pulls?q=is%3Apr+author%3Afabridamicelli)
  - English ‚Üí Spanish of the [Python 3.9 Official Documentation](https://github.com/python/python-docs-es/pulls?q=is%3Apr+author%3Afabridamicelli+)

---
For more details, check out my [GitHub Profile](https://github.com/fabridamicelli).
